{
* Copyright (c) 2020, Reijo Pursiainen, Hannu Pursiainen
* All rights reserved.
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*
*     * Redistributions of source code must retain the above copyright
*       notice, this list of conditions and the following disclaimer.
*     * Redistributions in binary form must reproduce the above copyright
*       notice, this list of conditions and the following disclaimer in the
*       documentation and/or other materials provided with the distribution.
*     * Neither the name of Reijo Pursiainen, Hannu Pursiainen nor the
*       names of its contributors may be used to endorse or promote products
*       derived from this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY REIJO PURSIAINEN, HANNU PURSIAINEN AND
* CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
* BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
* A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL REIJO PURSIAINEN,
* HANNU PURSIAINEN AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
* LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
}

///////////////////////////////////////////////////////////////////////////////
//
// FileName:  NolaForms.pas
// Location:  src\components
// Abstract:  FormNola on formi, joka "muistaa" asetuksensa eri sessioiden v‰lill‰.
//            Eri asetuksia ovat mm. siajinti ja koko sek‰ tila.
//            Formi asettaa automaattisesti myˆs komponenttiensa tekstit.
//
///////////////////////////////////////////////////////////////////////////////
//
// Following fields are automatically generated by the version control system:
//
// $Revision: 1.3 $
//     $Date: 2005/10/09 13:58:56 $
//
///////////////////////////////////////////////////////////////////////////////
//
// Change Log. Old log entries can be removed by deleting them.
// $Log: NolaForms.pas,v $
// Revision 1.3  2005/10/09 13:58:56  DEVELOPER2
// Reijolta 26.9.2005
//
//
// 7     2.08.02 12:14 DEVELOPER2
// Refresh removed because it caused that ScrollBox was drawn incorrectly
//
// 6     31.07.02 9:43 DEVELOPER2
// New file header.

unit NolaForms;

interface

uses
  Windows, Messages, SysUtils, Classes, Graphics, Controls, Forms, Dialogs,
  TextBase, {Globals, Err: Circular..}defs, Settings;

type
  TFormNola = class(TForm)
  private
    { Private declarations }
    lastHeight: integer;
    lastWidth:  integer;
    lastLeft, prevLeft:   integer;
    lastTop,  prevTop:    integer;

    procedure SetProperties;
    procedure SaveProperties;
    procedure SaveWindowParams;
    procedure LoadWindowParams;

  public
    { Public declarations }
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;

    procedure Init;
    procedure Resize; override;
    procedure SetTexts; dynamic;

    procedure WndProc(var Message: TMessage); override;

    procedure Print(canvas: TCanvas); virtual;
  end;

var
  FormNola: TFormNola;

implementation

{$R *.DFM}

uses Globals;

{uses }{PaaVal{IsDebPres,}{FileCtrl;}

(*procedure wrf (ots :string;  in_1,in_2 :integer);      VAR KoeFile :text;  KoeFilen :string;      begin
   if IsDebuggerPresent {and (FormNola.name='SyottoAvFrm')  }then begin
      KoeFilen := gAjoPath; //+-12.0.05 oli: ExtractFilePath (Application.ExeName); //<Pelkk‰ polku ilman filenime‰
      KoeFilen := KoeFilen +'Config';
      if NOT DirectoryExists(KoeFilen)  then             //<KoeFilen t‰ss‰ vain DIR
         ForceDirectories (KoeFilen);
      KoeFilen := KoeFilen +'\FrmInitTietoa.TXT';
      AssignFile (KoeFile,KoeFilen);
      if NOT FileExists (KoeFilen)
         then Rewrite (KoeFile)                          //<Vain alkuluvussa kirjoitetaan uusiksi.
         else Append  (KoeFile);                         //<Muuten kirjoitetaa loppuun (kun tullaan >= 2.kerran t‰nne).
    //writeln (KoeFile, FormNola.name +':  ' +ots +'Top= '+IntToStr(FormNola.Top) +' Height=' +IntToStr(FormNola.Height));
      writeln (KoeFile, ots +'  Top= '+IntToStr(in_1) +' Height=' +IntToStr(in_2) +'   ' +DateTimeToStr (Now));     //< Tai:  sd := TimeToStr(Time);
      Flush(KoeFile);                                    //Ensures that the text was actually written to file
      CloseFile(KoeFile);
   end;
end;*)

{ **********************************************************
   Alustetaan ohjelman tarvitsemat globaalit asetukset ja
   tarkistetaan mahdolliset ongelmat luotaessa formi.

   DEVELOPER2 1.9.1997
  ********************************************************** }
constructor TFormNola.Create(AOwner: TComponent);
begin
  inherited;

  if (Globals.myDesignInfo.screenHeight <> -1) then     //< -4.0.0  Vain PaaValFrm kutsui Init¥ia => vain se
     Init;                                      //          sijoittui talletuksen mukaan !!!!!!!!!!!
end;

procedure TFormNola.Init;
begin
//wrf ('Init              ',-9,-9);
  prevLeft := left;
  prevTop :=  top;

  SetProperties;
  Resize;
end;

{ **********************************************************
   Tallennetaan tarvittavat asiat formin tuhoutuessa.

   DEVELOPER2 1.9.1997
  ********************************************************** }
destructor TFormNola.Destroy;
begin
     SaveWindowParams;
     inherited;
end;

{ **********************************************************
   Tallennetaan ikkunan koon muutokset

   DEVELOPER2 25.03.1998
  ********************************************************** }
procedure  TFormNola.Resize;
begin
     if (WindowState = wsNormal) then
     begin
          lastWidth :=  width;
          lastHeight := height;
          lastLeft := left;
          lastTop := top;
     end;

     inherited;
end;

procedure TFormNola.WndProc(var Message: TMessage);
begin
//CloseKrt := CloseKrt +1; //<+2.0.4 DEVELOPER1.  Turhaa: Jos pist‰‰ BreakPointin, syntyy t‰h‰n ikuinen luuppi
   (*if {FormNola.}name='SyottoAvFrm'
        then wrf ('WndProc          1',Top,Height);*)
     // Tallennetaan koon ja paikan muutokset
     if (WindowState = wsNormal) then
     begin
          case message.Msg of
          WM_MOVE: // Tallennetaan paikan muutokset
             begin
                  prevLeft := lastLeft;
                  prevTop :=  lastTop;
                  lastLeft := message.LParamLo;
                  lastTop :=  message.LParamHi;
             end;

          WM_SIZE:
             begin // Tallennetaan koon muutokset
                  if (message.wParam = SIZE_RESTORED) then
                  begin
                       lastWidth :=  message.LParamLo;
                       lastHeight := message.LParamHi;
                  end
                  else if (message.wParam = SIZE_MAXIMIZED) or (message.wParam = SIZE_MINIMIZED) then
                  begin
                       lastLeft := prevLeft;
                       lastTop :=  prevTop;
                  end;
             end;
          end;
     end;

     inherited WndProc(Message);
   (*if {FormNola.}name='SyottoAvFrm'
        then wrf ('WndProc          9',Top,Height);*)
end;

{ **********************************************************
   P‰ivitet‰‰n tekstit

   DEVELOPER2 1.9.1997
  ********************************************************** }
procedure TFormNola.SetTexts;
begin
     myTextBase.AutoGetRecursiveComponentText(language, '', self);
end;

procedure TFormNola.SetProperties;
begin
     LoadWindowParams;
     SetTexts;
end;

procedure TFormNola.SaveWindowParams;
begin
     if (WindowState <> wsMinimized) then
        myRegSettings.SetIntegerValue(SETTINGS_USED, Name + WINDOW_STATE_ID, Integer(WindowState))
     else
        myRegSettings.SetIntegerValue(SETTINGS_USED, Name + WINDOW_STATE_ID, Integer(wsNormal));

     SaveProperties;
end;

procedure TFormNola.LoadWindowParams;
var
   currLeft: Real;   currTop: Real;
   Wmin{oli: marg},Hmin :integer; //<3.0.3 DEVELOPER1

   procedure DoEmpty;      begin end;

begin
     { Sijoitus tehd‰‰n siten, ett‰ aloitusvalikon
       * vasemmalle puolelle j‰‰ X prosenttia siit‰, mit‰ oikealla puolella on.
       * yl‰puolelle j‰‰ Y prosenttia siit‰, mit‰ alapuolella on. }

     { 0.1 ja 0.5 arvoja k‰ytet‰‰ mik‰li registryss‰ ei ole PAAVAL_WINDOW_LEFT_ID entry‰ }


   (*if {FormNola.}name='SyottoAvFrm'
        then wrf ('LoadWindowParams 1',Top,Height);*)
     if (BorderStyle = bsSizeable) then
     begin
          Height := myRegSettings.AutoGetIntegerValue(name + WINDOW_HEIGHT_ID, height);
          Width :=  myRegSettings.AutoGetIntegerValue(name + WINDOW_WIDTH_ID, width);
          //if name='SyottoAvFrm'  then Height := 900;
     end;
(*procedure TFormNola.LoadWindowParams;
var
   currLeft: Real;   h,w :integer; //<h,w: DEVELOPER1 4.2.99->1.1.3 ; Selvittelyyn: Avusteikkuna avautui aina MAXina
   currTop:  Real;                 //',,Nyt vaikkei n‰it‰ olisikaan, kaikki menee OK. Olisikohan jossain v‰liss‰
begin                              //   virheellisen arvon tallettuminen syyp‰‰ ??!!??!!??!!??!!??!!??!!??!!??!!
     { Sijoitus tehd‰‰n siten, ett‰ aloitusvalikon
       * vasemmalle puolelle j‰‰ X prosenttia siit‰, mit‰ oikealla puolella on.
       * yl‰puolelle j‰‰ Y prosenttia siit‰, mit‰ alapuolella on. }

      { 0.1 ja 0.5 arvoja k‰ytet‰‰ mik‰li registryss‰ ei ole PAAVAL_WINDOW_LEFT_ID entry‰ }

     if (BorderStyle = bsSizeable) then
     begin
          if self is TSyottoAvFrm  then //<,,DEVELOPER1 4.2.99->1.1.3 ; Selvittelyyn: Avusteikkuna avautui aina MAXina.
             begin end;                 //<<'',,N‰in jostain syyst‰ asia korjautui(?) vai vaikuttikohan se, ett‰
                                        //  Delphi lis‰si jonnekin (?) USESiin SyottoAvFrm :in !!!???!!!???!!!???
          h := height;                     //,name =esim. SyottoAvFrm, h =Sijoittuu Registryyn tms.jos siell‰EiOo
          h := myRegSettings.AutoGetIntegerValue(name + WINDOW_HEIGHT_ID, h); //ja h palautuu t‰h‰n HEIGHTin arvoksi
          w := width;
          w := myRegSettings.AutoGetIntegerValue(name + WINDOW_WIDTH_ID, w);
          Height := h;   Width := w;
     end;*)
{================================================================================================================
     if (myDesignInfo.ScreenWidth <> -1) then                                  //<,,,,,,,Alp / DEVELOPER2 3.10.2000 asti
        currLeft := Left / ((myDesignInfo.ScreenWidth) - Width)
     else
         currLeft := Left / (Screen.Width - Width);

     if (myDesignInfo.ScreenHeight <> -1) then
        currTop := Top / (myDesignInfo.ScreenHeight - Height)
     else
         currTop := Top / (Screen.Height - Height);

     Left := Round((Screen.Width - Width) *
                    myRegSettings.AutoGetDoubleValue(name + WINDOW_LEFT_ID, currLeft));
     Top :=  Round((Screen.Height - Height) *
                    myRegSettings.AutoGetDoubleValue(name + WINDOW_TOP_ID, currTop));
================================================================================================================

     if myDesignInfo.ScreenWidth - Width <= 0  then                         //<,DEVELOPER1:  T‰h‰nkin, ks. seur. Height
        currLeft := 0                          else                         //<'
     if (myDesignInfo.ScreenWidth <> -1) then
        currLeft := Left / ((myDesignInfo.ScreenWidth) - Width)
     else
        currLeft := Left / (Screen.Width - Width);

//OLISI HYVƒ "PINOTA" VƒHƒN LIMITTƒIN, esim Top = 5 pix * FormNro ???????????????????????????????????????????????
     if myDesignInfo.ScreenHeight - Height <= 0 then              //<,DEVELOPER1:  3.10.2000  K‰ynnistett‰ess‰:  Error:
        currTop := 0                            else              //<'       Floating point devision by Zero
     if (myDesignInfo.ScreenHeight <> -1) then
        currTop := Top / (myDesignInfo.ScreenHeight - Height)
     else
        currTop := Top / (Screen.Height - Height);

     Left := Round((Screen.Width - Width) *
                    myRegSettings.AutoGetDoubleValue(name + WINDOW_LEFT_ID, currLeft));
     Top :=  Round((Screen.Height - Height) *
                    myRegSettings.AutoGetDoubleValue(name + WINDOW_TOP_ID, currTop));
================================================================================================================}
                                                                //'-4.0.0 sijoitti aina Design. ,+4.0.0  4.1.2001
     if (myDesignInfo.ScreenWidth <> -1) then                          //<Jos ei aikais. talletettu,....
        if ((myDesignInfo.ScreenWidth) - Width) <> 0 then       // DEVELOPER2 2002-02-17: nollalla jako tarkistus
           currLeft := Left / ((myDesignInfo.ScreenWidth) - Width)          //<...currLeft := suhde suunnitteluRuudun
        else
            currLeft := 0
     else                                                                //leveyden - FrmLeveyden mukaan
        if (Screen.Width - Width) <> 0 then                     // DEVELOPER2 2002-02-17: nollalla jako tarkistus
           currLeft := Left / (Screen.Width - Width)
        else
            currLeft := 0;

     if (myDesignInfo.ScreenHeight <> -1) then
     begin
        if (myDesignInfo.ScreenHeight - Height) <> 0 then       // DEVELOPER2 2002-02-17: nollalla jako tarkistus
           currTop := Top / (myDesignInfo.ScreenHeight - Height)
        else
            currTop := 0
     end
     else
     begin
         if (Screen.Height - Height) <> 0 then                  // DEVELOPER2 2002-02-17: nollalla jako tarkistus
            currTop := Top / (Screen.Height - Height)
         else
            currTop := 0;
     end;
                                                                         //,name = esim. "PaaValFrm"
     Left := Round((Screen.Width - Width) *   myRegSettings.AutoGetDoubleValue(name + WINDOW_LEFT_ID, currLeft));
     Top :=  Round((Screen.Height - Height) * myRegSettings.AutoGetDoubleValue(name + WINDOW_TOP_ID,  currTop));

     WindowState := TWindowState(myRegSettings.AutoGetIntegerValue(name + WINDOW_STATE_ID, Integer(WindowState)));

//,,3.0.3 DEVELOPER1:  Korjataan jos suljettaessa lomake ollut liian ulkona tai Win kirjannut v‰‰rin,,,,,,,,,,,,,,,,,,,
     if WindowState=wsMinimized  then
        WindowState := wsNormal;    //<Oli "piippuhyllyll‰". Vaikka muutettu jo suljettaessa, ks. SaveWindowParams
     Wmin := 100;                   //<Marginaali = Ainakin t‰m‰n verran pit‰‰ lomaketta n‰ky‰
     Hmin := 66;                    //<Progres¥in Height
     if name='SyottoAvFrm'          //<,Debuggerille
        then DoEmpty;
        
     if Width <Wmin
     then Width :=  Wmin                     //<,Korjataan liian pieni ikkunakoko
     else if Width>Screen.Width              //<,+8.0.5
     then Width := Screen.Width;
                                             //,Ehto: Height<EdwNewFrm.JohdotColHeaderPanel.Height+500)  Ei onaa.
     if (name='EdvNewFrm') and (Height<657)  //657
        then Height := 657;                  //<'Jotta EdvNewFrm¥in vas.reunan paneli n‰kyisi kokonaan. +11.0.0a

     if Height<Hmin                //,,HEIGHT :=  myˆs PaaVal.PAS :ssa ############################ 11.0.0 ####### 
     then Height := Hmin
     else if Height>Screen.Height            //<,+8.0.5
     then Height := Screen.Height;

               //,,THEN-ELSE ketju poistettu. Tosin turhaan, koska edell‰ asetetaan ettei kokon.mitat ylity +8.0.5
     if Left +Width > Screen.Width           //<Meneekˆ oikealta yli
        then Left := Screen.Width-Width;
     {else}                                                                                      //<-8.0.5
     if Left < 0                             //<Meneekˆ vasemmalta kokonaan ohi
        then Left := 0;
                 //,Breakpoint Condition¥iksi:  name='SyottoAvFrm'
     if Top +Height > Screen.Height          //<Meneekˆ niin ALAS, ettei Captioniin pysty tarttumaan
        then Top := Screen.Height-Height;
     {else}                                                                                      //<-8.0.5
     if Top < 0                              //<Meneekˆ niin YL÷S, ettei Captioniin pysty tarttumaan
        then Top := 0;

   (*if IsDebuggerPresent and (name='SyottoAvFrm')  then           //<Debuggerille
     if (lastWidth<>width) and (lastHeight<>height) and (lastTop<>top) and (lastLeft<>left)
        then wrf ('LoadWindowParams  ',Top,Height);*)
       {if FormNola<>NIL  then
        if TopE<>Top
           then DoEmpty;                     //<Debuggerille
     TopE := Top;}
   (*if {FormNola.}name='SyottoAvFrm'
        then wrf ('LoadWindowParams 9',Top,Height);*)
end;//LoadWindowParams

procedure TFormNola.SaveProperties;
var
   h,w, l,t:integer;
begin
     if (WindowState = wsNormal) then
     begin
          l := Left;
          t := Top;
          h := Height;
          w := Width;
     end
     else
     begin
          l := lastLeft;
          t := lastTop;
          h := lastHeight;
          w := lastWidth;
     end;

     if (BorderStyle = bsSizeable) then
     begin
          myRegSettings.SetIntegerValue(SETTINGS_USED, Name + WINDOW_WIDTH_ID, w);
          myRegSettings.SetIntegerValue(SETTINGS_USED, Name + WINDOW_HEIGHT_ID, h);
     end;

     if (Screen.Width - w) <> 0 then   // DEVELOPER2 2002-02-17: nollalla jako tarkistus
        myRegSettings.SetDoubleValue(SETTINGS_USED, Name + WINDOW_LEFT_ID, (l / (Screen.Width - w)));
     if (Screen.Height - h) <> 0 then  // DEVELOPER2 2002-02-17: nollalla jako tarkistus
        myRegSettings.SetDoubleValue(SETTINGS_USED, Name + WINDOW_TOP_ID, (t / (Screen.Height - h)));
end;

{ **********************************************************
   Tulostaa formin annettuun canvaasiin.
   Ei sis‰ll‰ headeria.

   DEVELOPER2 6.12.1998
  ********************************************************** }
procedure TFormNola.Print(canvas: TCanvas);
begin
end;

end.
