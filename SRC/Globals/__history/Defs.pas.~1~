{
* Copyright (c) 2020, Reijo Pursiainen, Hannu Pursiainen
* All rights reserved.
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*
*     * Redistributions of source code must retain the above copyright
*       notice, this list of conditions and the following disclaimer.
*     * Redistributions in binary form must reproduce the above copyright
*       notice, this list of conditions and the following disclaimer in the
*       documentation and/or other materials provided with the distribution.
*     * Neither the name of Reijo Pursiainen, Hannu Pursiainen nor the
*       names of its contributors may be used to endorse or promote products
*       derived from this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY REIJO PURSIAINEN, HANNU PURSIAINEN AND
* CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
* BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
* A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL REIJO PURSIAINEN,
* HANNU PURSIAINEN AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
* LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
}

///////////////////////////////////////////////////////////////////////////////
//
// FileName:  Defs.pas
// Location:  src\Globals
// Abstract:  Yleisiä määrityksi, joita käytetään eri puolilla ohjelmaa
//
///////////////////////////////////////////////////////////////////////////////
//
// Following fields are automatically generated by the version control system:
//
// $Revision: 1.5 $
//     $Date: 2005/10/09 14:01:50 $
//
///////////////////////////////////////////////////////////////////////////////
//
// Change Log. Old log entries can be removed by deleting them.
// $Log: Defs.pas,v $
// Revision 1.5  2005/10/09 14:01:50  DEVELOPER2
// Reijolta 26.9.2005
//I '..\GlobINC\NolaTyp.INC'}                           //<¤DEVELOPER1
//
// 22    18.08.04 19:50 DEVELOPER2
// Reijolta 2004-08-18
//
// 11    10.01.04 12:55 DEVELOPER2
// - seuraavat turhat määrittelyt poistettu:EDV_JOHTO_FIRST, EDV_JOHTO_LAST
// - vanhoja muutoksista kertovia kommentteja poistettu
//
// 10    22.11.03 10:59 DEVELOPER2
// - Tiedoston otsikkotiedot lisätty
// - Johto-osien väliin jäävää tilaa kasvatettu

unit Defs;

interface

uses
    forms, Graphics, Settings, SysUtils{+12.0.05+},Dialogs, Classes{12.0.08: TStringList}, IniFiles{+120.5},WinApi.Windows{120.5f}, //Ks. myös implem./DetEv
    RichEditNola{1414d}, System.UITypes;
type
    { Tyypit, joita asetuksiin voidaan tallanetaa }
     SETTINGS_TYPE = (
                        SETTINGS_TYPE_INTEGER,
                        SETTINGS_TYPE_STRING,
                        SETTINGS_TYPE_BOOLEAN,
                        SETTINGS_TYPE_CURRENCY,
                        SETTINGS_TYPE_DOUBLE,
                        SETTINGS_TYPE_DATETIME,
                        SETTINGS_TYPE_SYSTEMTIME
                      );
const
     PROGRAM_NAME                   = 'NOLA';
     PROGRAM_NAME_LONG              = 'NOLA - Sähköverkon laskenta ja analysointiohjelma';
     {,,ÄLÄ MUUTA TÄTÄ. JOS ANNETAAN LicNo EiPvitysOIKEUDELLA JA MYÖH HALUTAAN SE MUUTTAA PvitysOIKEUDELLA,
        JOUDUTAAN AVAAMAAN UUDELLA LicNo´lla.#############################################################}
     PROGRAM_VERSION_LICENSE       = 9;  //<Lisenssin versiopäivitystä varten niille, joilla eioo pvityssopimsta.
                                         //'Jos poikkeaa annetun lisenssin version n:osta, uusi ei enää worki!!!!
                                         //'Jos uusi versio annetaan sellaiselle, jolla ei pvitysoikeutta, TÄMÄ
                                         // MUUTETTAVA LISENSSIN MYÖNTÄMISAJANKOHDAN MUKAISEKSI, esim. 2 :ksi.###
     {'10=7.0.1  9=6.2.2  8=6.6.2002/6.0.2  7=8.1.2002/5.0.1  6=4.0.4
       5=1.5.01/4.0.1  4=17.12.00/4.0.0   3(takas)=4.7.00/3.0.3  4=13.6.00/3.0.2  3=28.11.99/2.0.5:een  2=2.6.1999}

     //,LicNo :t, joilla ei enää päivitysoikeutta, ks. FNC EiPvitysListassa, vrt NolaRek.NOR ja OutLook/AddresBook.
VAR   LicEiPvitList :ARRAY of integer;        //<Tähän sijoitetaan LicEiPvitStr :sta PRC ChkLisensLista_NolaRek :ssa
      gAjoExeN,gAjoPath,gAjoConfPath :string; //<<Näihin AINOALLA Application.ExeName -kutsulla JuuriDir (+sen alta Config)
                                         //,22= suullisesti sovittu 22.8.05 maksavansa pvityksen. Maksoi, mutta EI JATKUVAKSI.}
CONST LicEiPvitStr=//'12 15 18 52 124 '+ //<Nämä testauksen takia.  120.4:  LicEiPvitlLisStr => LicEiPvitStr.
                       '13 14 17 18 19 21 22 24 26 27 29 30 32 34 35 36 37 38 40 41 42 44 45 46 47 48 49 51 52 54 55 57 58 61 63 64 65 66 67 68 '+
                       '69 70 71 72 73 74 75 76 78 81 82 83 85 88 89 90 91 92 93 94 95 96 97 100 101 102 104 105 106 107 112 113 114 115 116 '+
                       '117 118 119 121 122 123 124 126 127 128 131 132 133 125'; //<'ks. PaaVal.PAS  '66,88=Mäenpää ei maksanut 2006
      tstW7ajo=false; //Jakeluversioon oltava FA. +11.0.2 #######################################################
                      //'########################################################################################
             {KOEajotoimintaa voidaan ohjata KOLMELLA TAVALLA (jos IsDEBUGGERPRESENT):,,,,,,,,,,,,,,,,,,,,,,,,,,,,
                 Defs.PAS: -Ennen käännöstä:  TEST_LISENSSILAAJUUS<>0.  LisYliDemo_ () KUTSUT ohjailevat toimintaa.
                                                                       '#########################################'
                 Y_.PAS:   -Ajon aikana muutetaan:  Päävalikko / AsetusBtn => AsetusFrm.SalaEdi.Text '1'...'4'.
                            jolloin                                    FNC Demö := TR ja versiolaajuudeksi emNo
                           -Ajon aikana muutetaan:  Päävalikko / AsetusBtn / Demö -lehdellä LAAJUUS.
                                                                       '#########################################'}
     TEST_LISENSSILAAJUUS=0;//Norm=0, 1=LT  2=PRO jne. VAIKUTTAA VAIN JOS <>0:  0=Ohitetaan LisenssilaajuusTESTIAJO.
                            //'Korvaa lisenssin muuttamisen: -1=Demo  1=lvLT  2=lvPRO  3=lvEXT  4=lvGLOB,  Ks. Y_.PAS

     //,Vaikuttaa käyttöoikeuteen,,,,,,, Muutosmerkinnät KAIKISSA SORCISSA 6.1.0 :lle = 6.0.4 ####################
     PROGRAM_VERSION_MAJOR          = 15; //############################## '''''''''''''''''' ####################
     PROGRAM_VERSION_MINOR          = 0;
     PROGRAM_VERSION_RELEASE        = 0;
     PROGRAM_BUILD_DATE             = '22.04.2020'; //'31.8.2017e'; //'27.8.2017d'; //'28.06.2017c'; //'21.05.2017a'; 17.02.2017f; 10.02.2017e; 2.02.2017d; 10.10.2016'; Aiottu~'18.8.16, 6.7.2016';//'1413=25.04.2016';
                                    //14.1.2/12.04.2016; //1411  22.06.2015(eiNetissä);  13.0.3  13.05.2015 b;
                                    //19.03.2015; 2.11.14d; '14.09.2014 a';  6.07.2014 o'; 120.5(e)m 13.5.2014,  120.5 31.3.2014m, 17.03.2014k,
                                    //10.02.2014i, 120.5g 29.01.2014g';
     //Tuomi-yhtiöille 11.0.0 '02.03.2009';
     {1205 31.12.2013; 1204 13.12.2013; 1203 22.10.2013; 1202 18.06.2013; 1201 26.05.2013; 1200 12.5.2013; 1201 26.05.2013;
      1100=16.11.2009; 1007=10.2.2009; 1006=10.12.2008'; 1005=08.09.2008';
      1004=16.07.2008'; 1003=24.02.2008; 1002=16.02.2008; 1001=17.12.2007; 901=30.05.2007; 8014=16.04.2007; 8012=8.4.2007;
      8011=12.03.2007; 809=06.10.2006; 808=03.10.2006; 807=1.06.2006; 806=23.04.2006; 805=11.04.2006; 804=06.03.2006;
      803=14.02.2005; 8.0.1=1.12.2005; s8.0.0=8.11.2005; 7.0.5=19.08.2005; 7.0.4=9.06.2005; 7.0.3=26.2.2005;
      7.0.2=14.12.2004; 7.0.1=21.10.2004; 6.2.21=21.09.2004; 6.2.18=01.09.2004; 6.2.17=25.08.2004; 6.2.16=16.08.2004
      6.2.15=9.6.2004; 6.2.14=29.04.2004; 6.2.13=22.04.2004; 6.2.9=7.04.2004; 627=25.03.2004; 626=21.03.2004;
      625=19.03.2004 ; 624=9.03.2004; 623=7.3.2004; 622=2.3.2004; 621=19.10.2003; 610=9.10.2002; 603=15.08.2002;
      14.08.2002:n Bugifix; 26.03.2002; 8.1.2002; 25.09.2001; 31.05.2001; 09.05.2001; 01.05.2001; 08.01.2001;
######################### MUISTA PÄIVITTÄÄ MYÖS VERSIOMUUTOSTIEDOT Avuste.INC´iin ###################################
#####################################################################################################################
####################################################################################################################}
fWnd = false;//}true; //<TR =ohjaa lic.kirjoituksen GetWindowsDir´iin (C:\WINDOWS\.., =ALP, ei GetValvooDir).   L§koe
{-$message Hint 'FNC fWnd ehkä asetettu TRUE, ohjaa licenssikirjoituksen C:\Windows\Nola´an.'}

   //,Nimi muutettu vähemmän oikean tuntuiseksi 11.0.1,   oli: "C:\TESTMANAGER-FI§$253ENIGMA"
   //,Tämä asettaa myös FNC SalaSallii  (joka sis. fKaikkiOikeudet_1x) JA fKaikkiOikeudet_1x arvot.
KaikkiOikDirN ='C:\TESTATTAVA-DIRRINIMI§2$437';  //<130.2e=..§2$437'  +12.0.06=..§1$532' 1415c: Nyt annettu myös Yht.Inssit Oy´lle (Heillä ei licOngelmia, kokeilua muuhun).
                                                 //1415c: Aikais annettu Grandlund + ehkä Hepacon´ille. Tämä mahistaa ajon 180 pvksi, ks. Yli6kkAjojaJalkeenLicDirPvm.
             //'C:\TESTATTAVA-DIRRINIMI§$253';   //<+11.0.0 -12.0.06:  Sallii täyslaajuuden oli LIC eli ei jos
             //'############ tämän niminen DIRRI LÖYTYY, ks. Y_.PAS/KaikkiOikeudet_1x ja PaaVal.PAS/Tutki. ############
             //'############ Tyhjennä str, silloin demotesti yms. ei ohitu.  Debug-testi varoittaa.        ############
ValiaikKaikkiOik='ÄIKÄOIKA'; //<Tällä salasanalla ASETUKSET/mikroBx´iin =kaikki oikeudet.  "KARIPESSI" kaikki oikeudet 10.0.3´een, vex -10.0.7, poista myöhemmistä.
TestiAjo = {true;}false;                    //<Muuttujan nimi on hyvä olla sorcessa, missä kohtaa testikuvioita: ETSIttäväksi.
    //Halutussa sorceKohdassa aseta:  {%DEFINE TstAjo}, missä % => $ => Herja testiasjosta =9.0.1
Defs_KoeAjo{+4.0.0} = TRUE;//}FALSE;        //TR = Mm. Hide AVUSTEIKKUNAN, ettei peitä sorsaa BrekPoint -katselussa
  DefsFileChkLueONdn_203= '$DefsFileChkLue-203'; //<+1414e. 1414fu. DIRri samassa kuin NOLAxx.EXE.
//fsFileenKirjONdn_204= '$DefsFileeseenON-204';  //<Jos DIRri löytyy, kytkee PRC DefsFileen kirjoitus päälle jo NOLAn latautuessa = Conf- yms. filenimet.
//fsFileeseenONdn= '$DefsFileeseenON-204';  //'tiedostoon:  '_$DefsFileen.txt'  TÄHÄN -dirriin, joka SAMASSA DIRrissä kuin NOLA.EXE.
//OLI''''''''''''                           //'Ks. PRC EtsiExenJuuri_TeeAjoDir, nyt FNC
                                            //'_$DefsFileeseenON => _$DefsFileeseenON-204 =120.4
FnRePunEhdotOHI='$_RePunEhdotOHI.oma';      //<Kun tämän niminen file löytyy EXEn dirristä, OHITTUU DEVELOPER1 koneissa fRePun.. ehdot +130.2, 1414d: $_ReP..
{######################################################################################################################
#######################################################################################################################
######################################################################################################################}
     REKFILE_NAME ='NolaRek.NOR';   //<+1203.
     PROGRAM_DIR_ID                 = 'Program directory';
     LANGUAGE_ID                    = 'Language';
     LANGUAGE_DEF                   = 'Suomi';
   //NolaRekPFN                     = 'E:\NolaRek\NolaRek.NOR'; //<+12.0.0  12.0.05: Sirrtty Defs.PAS/PRC EtsiExenJuuri_TeeAjoDir

     KAAPELIHINTA_FILE_ID           = 'CablePricesFile';
     TARIFFIHINTA_FILE_ID           = 'TarifDataFile';
     KAAPELITYPE_FILE_ID            = 'CabelTypeFile';          //<+6.0.2
     DATA_PATH_ID                   = 'NolaDATA';
     LICENSE_PATH_ID                = 'NolaLICENSE';

//   INFINITE                       = 0;
     NOLA_INFINITE: Integer         = 0;

    {VÄRIT }                                              //<Purple=-2147483640 =SiniPunainen
     COLOR_FUCHSIA     = '<f n="" s="" c="16711935">';    //<Fuchsia=16711935   =NeonPunainen
     COLOR_PUDVAL      = '<f n="" s="" c="16711935">';//-2147483640">'; //<Pudotusvalikkoon viittaukset avusteissa. +7.0.5
     COLOR_WHITE       = '<f n="" s="" c="16777215">';    //<+6.2.2
     COLOR_TEAL        = '<f n="" s="" c="8421376">';
     COLOR_BLUE        = '<f n="" s="" c="16711680">';
     COLOR_GREEN       = '<f n="" s="" c="32768">';
     COLOR_RED         = '<f n="" s="" c="255">';
     COLOR_BLACK       = '<f n="" s="" c="0">';
     COLOR_GRAY        = '<f n="" s="" c="-2147483640">'; //Ei käytetty, poistettu}
     COLOR_SILVER      = '<f n="" s="" c="12632256">';
     COLOR_IK3D_       = '<f n="" s="" c="128">';//{COLOR_BLACK;//}'<f n="" s="" c="12632256">'; //<Helppo muuttaa esitteitä varten vaalea tummaksi TÄSSÄ.
     CLR_PURP          = '<f n="" s="" c="8388736">';     //<Purple
     COLOR_END         = '</f>';

     CPUD              = COLOR_PUDVAL;                    //< +7.0.5
     CLR_REB           = COLOR_RED+'<b>';
     CLR_GRB           = COLOR_GREEN+'<b>';
     CLR_BLB           = COLOR_BLUE+'<b>';
     FNT_B0            = '</b></f>';
     CLR_RED           = COLOR_RED;
     CLR_BLU           = COLOR_BLUE;
     FNT_0             = '</f>';

     EDV_FONT_END      = '</f>';
     ALIGN_LEFT        = '<left>';
     ALIGN_RIGHT       = '<right>';
     ALIGN_CENTER      = '<center>';

     { Erikoismerkkejä }
   //FONT_ALFA = '<f n="Symbol">'+Chr( 97)+'</f>';
   //Vaihto esim. Courier New´lle:    '<f n="Courier New">'  ja pois päältä eli paluu ed:lle:  '</f>'
     FONT_COURIER='<f n="Courier New">';
     FONT_SSERIF= '<f n="MS Sans Serif">';
     FONT_ALFA= '<f n="Symbol">a</f>';
     FONT_OMEGA='<f n="Symbol">W</f>';             //<Ohmi
     FONT_DELTA='<f n="Symbol">D</f>';
     FONT_SIGMA='<f n="Symbol">S</f>';
     FONT_PII=  '<f n="Symbol">p</f>';
     FONT_MYY=  '<f n="Symbol">m</f>';
     FONT_DIV=  '<f n="Symbol">Ö</f>';
     FONT_KAPPA='<f n="Symbol">c</f>';
     FONT_GAMMA='<f n="Symbol">g</f>';
     FONT_EETTA='<f n="Symbol">h</f>';
     FONT_EPSIL='<f n="Symbol">e</f>';

     FONT_SIGMA1='<f n="Symbol">å</f>';            //< Isompi SIGMA
     FONT_2JUURI='<f n="Symbol">Ö</f>';            //< Neliönjuuri V¨
     FONT_FII=   '<f n="Symbol">j </f>';           //< Pieni Phii +' ' koska w2000 ainakin pyyhkii osan vex 5.0.1
     cosf='cos'+FONT_FII;
     FONT_FIIe=  '<f n="Symbol">j</f>';            //< Pieni Phii ilman ' '.+6.2.2
     FONT_FII1=  '<f n="Symbol">F</f>';            //< Iso   Phii
     FONT_DELTAP='<f n="Symbol">d</f>';
     FONT_OIKEALLE='<f n="Symbol">®</f>';          //<  Nuoli oikealle   ->
     FONT_VASEMMALLE='<f n="Symbol">¬</f>';        //<  Nuoli vasemmalle <-
//   FONT_NUOLI2=    '<f n="Symbol">«</f>';        //<  Nuoli vasemmalle-oikealle (= 2-päinen)
     FONT_PIENPI='<f n="Symbol">'+Chr(163)+'</f>'; //<  <=
     FONT_SUURPI='<f n="Symbol">'+Chr(179)+'</f>'; //<  >=
     FONT_VAS2=  '<f n="Symbol">'+Chr(220)+'</f>';
     FONT_OIK2=  '<f n="Symbol">'+Chr(222)+'</f>';
     FONT_LIKIM= '<f n="Symbol">'+Chr(187)+'</f>';
//   FONT_PO=    '<f n="Symbol">º</f>';            //<  PitääOlla
     FONT_AARETON='<f n="Symbol">¥</f>';           //<  Ääretön oo  +1414f.

     { Tyylit }
     STYLE_BOLD_BEGIN = '<b>';
     STYLE_BOLD_END   = '</b>';


{ Asetusten vakioita (+12.0.05:)REGISTRYyn
DEVELOPER2 26.2.2012: Siirretty Components\Settings.pas jotta komponentit eivät
riippuisi Nolasta.
     SETTINGS_USED                  = 'Settings';
     SETTINGS_DEFAULT               = 'Settings - default';
     SETTINGS_NOLA_COUNT            = 'Active Nola-programs';
     SETTINGS_SOFTWARE              = 'Software';
     SETTINGS_ROOT                  = 'Nola';
     SETTINGS_TYPE_INTEGER_CHAR     = 'I';
     SETTINGS_TYPE_STRING_CHAR      = 'S';
     SETTINGS_TYPE_BOOLEAN_CHAR     = 'B';
     SETTINGS_TYPE_CURRENCY_CHAR    = 'C';
     SETTINGS_TYPE_DOUBLE_CHAR      = 'D';
     SETTINGS_TYPE_DATETIME_CHAR    = 'A';

     SETTINGS_TYPE_BOOLEAN_FALSE    = 'F';
     SETTINGS_TYPE_BOOLEAN_TRUE     = 'T';

     SETTINGS_DEFAULTS_COUNT        = 18;   Kuinka monta alustusarvoa asetetaan //< 16=>17 2.0.7  18 6.0.2
                                      'Asetus Settings.PAS}

{ Asetukset - Asetus}
     ASETUS_HALTIJA                 = 'Owner';

{ Asetukset - Lisenssi}
     LICENSE_CONF                    = '3';
     LICENSE_CODE                    = '2';
     LICENSE_ID                      = '1';
     LICENSE_LAST_RUN                = 'Nje - Window left';
     LICENSE_MANAGER_COUNT           = 'Nje - Window state';
     LICENSE_DATE_INSTALLED          = 'Nje - Window top';
     LICENSE_DATE_REMOVED            = 'Nja - Window left';
     LICENSE_DATE_MOVED              = 'Nja - Window top';
     LICENSE_NOLA_COUNT              = 'Nola - count';
     LICENSE_DIR_TIME                = '4';
     LICENSE_SECTION                 = 'License';
     LICENSE_COMPUTER                = 'Computer';
     LICENSE_NOLANET_RUNNING         = 'NolaNet';
     LICENSE_SIGNATURE               = '6';
     LICENSE_SESSION                 = '7';
     LICENSE_NUMBER_CLIENT           = '8';
     LICENSE_NUMBER_SERVER           = '9';
     LICENSE_SALT                    = '10';
     LICENSE_SIGNATURE_SERVER        = '11';
     LICENSE_HOST_ID                 = 'Nja - Window state';
     LICENSE_DEFAULT_PATH            = {'config\}'License';

     { Lisenssin päivityssykliä pienennetty 5:stä 2:een minuuttiin. DEVELOPER2 9.7.1999 }
     LICENSE_UPDATE_INTERVAL_SERVER  = 2*60*1000; // Millisekunteja 2*60*1000 = 2 min
     LICENSE_CLOCK_ERROR             = 2*60*1000; // Millisekunteja 2*60*1000 = 2 min

     LICENSE_MAX_NOT_CLIENT_UPDATED  = 3;

 //    LICENSE_UPDATE_INTERVAL_SERVER  = 5*60*1000; // Millisekunteja 5*60*1000 = 5 min
 //    LICENSE_CLOCK_ERROR             = 5*60*1000; // Millisekunteja 5*60*1000 = 5 min
     TEST_FILE                       = '_NolTest';

{
DEVELOPER2 26.2.2012: Siirretty Components\LicenseFuncs.pas jotta komponentit eivät
riippuisi Nolasta.
     LICENSE_DATE_NOT_SET            = -9.99;
     LICENSE_DATE_NOT_FOUND          = -99.99;
     LICENSE_ERROR_INFO_NOT_FOUND    = 0;
     LICENSE_ERROR_INFO_FALSE        = 1;
     LICENSE_ERROR_INFO_TRUE         = 2;
}

{ Asetukset - Edv}
     EDV_HEADER_OPEN                = 'Edv - IsHeaderOpen';

{ Asetukset tulostus }
     PRINT_WINDOW_AFTER_NEWLINE     = 'Print Window - header after newline';
     PRINT_WINDOW_AFTER_NEWPAGE     = 'Print Window - header after newpage';
     PRINT_WINDOW_TAIL              = 'Print Window - tail';
     PRINT_WINDOW_OPEN_CLOSED       = 'Print Window - open closed';
     PRINT_WINDOW_PRINT_HEADER      = 'Print Window - print header';
     PRINT_MARGINAL                 = 100; { Leveys, joka laitetaan paperin reunaan tulostettaessa }
     PRINT_WINDOW_ZOOM_EDV          = 'Print Window - zoom edv';
     PRINT_WINDOW_ZOOM_SULAKE       = 'Print Window - zoom sulake';
     PRINT_WINDOW_ZOOM_ZS           = 'Print Window - zoom sulake';
     PRINT_WINDOW_ZOOM_NJ           = 'Print Window - zoom nj';
     PRINT_BG_COLOR                 = clWhite;
     PRINT_DISABLED                 = 1;
     PRINT_WIDTH_FIT_TO_PAGE        = 2;
     PRINT_ZOOM_MIN                 = 1;     // Pienin mahdollinen tulostuskerroin. DEVELOPER2 6.12.98
     PRINT_ZOOM_MAX                 = 500;   // Suurin mahdollinen tulostuskerroin. DEVELOPER2 6.12.98

{ Asetukset - detev }
     WINDOW_LEFT_ID                = ' - Window left';
     WINDOW_TOP_ID                 = ' - Window top';
     WINDOW_WIDTH_ID               = ' - Window width';
     WINDOW_HEIGHT_ID              = ' - Window height';
     WINDOW_STATE_ID               = ' - Window state';

{Tekstivarasto }
     TEXTBASE_FILE_ID               = 'TextBase File';
     TEXTBASE_ERROR                 = 'TEXTBASE ERROR';
     TEXTBASE_BUFFER_SEPARATOR      = '|';
     TEXTBASE_FONT_NAME             = '<font>';
     TEXTBASE_FONT_SIZE             = '<si>';
     TEXTBASE_FONT_STYLE            = '<st>';
     TEXTBASE_FONT_COLOR            = '<co>';
     TEXTBASE_STYLE_BOLD            = 'B';
     TEXTBASE_STYLE_ITALIC          = 'I';
     TEXTBASE_STYLE_UNDERLINE       = 'U';
     TEXTBASE_STYLE_STRIKEOUT       = 'S';

{ EDV }
     EDV_COLOR_FONT_HEADER          = COLOR_BLUE;
     EDV_COLOR_FONT_JOHTO_HEADER    = COLOR_BLUE;
     EDV_COLOR_FONT_POHJA_HEADER    = COLOR_BLUE;
     EDV_COLOR_FONT_POHJA           = COLOR_BLUE;
     EDV_COLOR_FONT_NJ              = COLOR_GREEN;
     EDV_COLOR_FONT_INPUT           = COLOR_BLACK;

     SMALLEST_RESISTANSSI           = -7;
     SMALLEST_AIKA                  = -2;
     SMALLEST_POISAIKA              = -1;
     SMALLEST_POIKKIPINTA           = -1;
     SMALLEST_SULAKE                = 0;
     SMALLEST_VIRTA                 = -1;
     SMALLEST_PITUUS                = -1;
     SMALLEST_LAMPOTILA             = 0;
     SMALLEST_KORJAUSKERROIN        = -2;
     SMALLEST_PROSENTTI             = -2;
     SMALLEST_KULMA                 = -2;

     EDV_JOHTO_BORDER               = 20; {Johtojen välissä oleva tila }
     EDV_JOHTO_VBORDER              = 50; {Johtojen välissä oleva tila }
     EDV_BUTTON_HEIGHT              = 22;       // johtonapin korkeus
     EDV_BUTTON_WIDTH               = 22;       // johtonapin leveys
     EDV_JOHTO_WIDTH                = 1;        // Johdon paksuus
     EDV_JOHTO_COLOR                = {clSkyBlue;//} clBlack;  //§§§c§§§ Johtojen väri
     EDV_POHJA_COLOR                = {clAqua;//} clWhite;     //§§§c§§§ Pohjan   väri 12.0.0: clAqua erottuakseen.
     EDV_MAX_IMAGE_WIDTH            = 5000;
     EDV_JAKOKESKUS_WIDTH           = 8;        // Jakokeskuksen leveys.  6.0.0 oli 6
     EDV_SULAKE_WIDTH               = 15;       // Sulakkeen leveys
     EDV_SULAKE_HEIGHT              = 7;        // Sulakkeen korkeus
     EDV_SULAKE_LEFT                = 0;        // Sulakkeen etäisyys vasemmalta
     EDV_MUUNTAJA_WIDTH             = 26;       // Muuntajan leveys
     EDV_MUUNTAJA_HEIGHT            = 12;       // Muuntajan korkeus
     EDV_NOUSUJOHTO_FROM_RIGHT      = 20;
     EDV_POTTASAUS_TOP              = 10;
     EDV_POTTASAUS_FROM_RIGHT       = 5;
     EDV_POTTASAUS_WIDTH            = 2;

     EDV_HEADER_COLS_2              = 2;

     EDV_SULAKE_COLS_3              = 3;
   //EDV_SULAKE_ENTRIES_15          = 15; { rivien määrä EdvSulakeArrayssa}//<,1202 Ei käytetty.

   //EDV_LAHDOT_FIRST_ROW_17         = 17; { Rivi, jolta lahdot alkavat } //<DEVELOPER1:  1.1.2  16->17
     EDV_LAHDOT_COLS_6              = 6;

   //ARRAY_ENTRIES_3                  = 3;  { sarakkeiden lukumäärä taulukon rivilla } //-1202: Ei käytetty.

     EDV_HEADER_COL_0              =   0;
     EDV_MIDDLE_COL_1              =   1;
     EDV_SULAKE_COL_2              =   2;

     EDV_NJOHTO_TYYPPI_AL          =   TRUE;
     EDV_LAHDOT_SULAKE_COL_0       =   0;
     EDV_LAHDOT_PPINTA_COL_2       =   2;
     EDV_LAHDOT_TYYPPI_COL_3       =   3;
     EDV_LAHDOT_PITUUS_COL_4       =   4;
     EDV_LAHDOT_TUP_COL_5          =   5;  //<-1202: Ei käytetty.
                                                //,,DEVELOPER1                          1.1.2: _ROW  3->4
     EDV_MAX_SULAKKEET_HEADER_ROW_4=   4;       //<"Max.Sulakkeet"=r9.  0 = Ik1v -rivi = Selityspanelin 1.rivi
     EDV_SUL_OIKOSULKUSUOJAUS_HEADER_ROW_10= 10; //<"Max.katkaisija-as."     =r15  1.1.2: _ROW  9->10
     EDV_MAX_AIKA_ASETUS_15                = 15; //<"Max. aika-asetus"       =r20  1.1.2: _AS..14->15
     EDV_MAX_LAHDOT_PITUUDET_HEADER_ROW_16 = 16; //<"Max. Lähdöt / pituudet" =r21  1.1.2: _ROW 15->16  Ei käytetty.

     EDV_LAHDOT_EROTIN = '/';
     EDV_SULAKE_EROTIN = ':';
     EDV_LAHTO_EROTIN  = '=';
     EDV_OIKOSULKUARVO_EROTIN = '=';

{ Z_PAAVAL-modulin asetukset}
     NOLAZ_KAAPRAK_FILE_ID       = 'Kaapeleiden rakennetiedot -tiedosto';
     NOLAZ_A2_MAARAYKSET_FILE_ID = 'A2-määräysten ydinkohdat -tiedosto';


{ Tekstit, joita käytetään mikäli tekstitiedostoa ei pysytä avaamaan }
     TEXTBASE_TEXT_FILE_ERROR       = 'Can not open textbase-file!';
     NOLA_FATAL_ERROR               = 'NOLA fatal error';

var
{ Automaattisesti asetettavat alkuarvot.
  HUOM! Pitää asettaa SETTINGS_DEFAULTS_COUNT arvo vastaamaan kuinka monta
        alkuarvoa asetetaan automaattisesti!

  Esim.
     WINDOW_WIDTH_ID,   '200',                      SETTINGS_TYPE_INTEGER_CHAR,
     WINDOW_NAME_ID,    'Nimi',                     SETTINGS_TYPE_STRING_CHAR,
     WINDOW_DOUBLE_ID,  '0.01',                     SETTINGS_TYPE_DOUBLE_CHAR,
     WINDOW_VISIBLE_ID, SETTINGS_TYPE_BOOLEAN_TRUE, SETTINGS_TYPE_BOOLEAN_CHAR
}
//====================================================================================================================================
   Defaults: array[0..(SETTINGS_DEFAULTS_COUNT * 3) - 1] of string = (                      //,,Config vex 12.0.05,,,,,,,,,,,,,,,,,,
    TEXTBASE_FILE_ID,               'TextBase.NOL',              SETTINGS_TYPE_STRING_CHAR, //<,,Sama 2x =Const +VAR
    NOLAZ_KAAPRAK_FILE_ID,          'Z_RAKEN.RTF',               SETTINGS_TYPE_STRING_CHAR,
    NOLAZ_A2_MAARAYKSET_FILE_ID,    'Z_A2.RTF',                  SETTINGS_TYPE_STRING_CHAR,
    KAAPELIHINTA_FILE_ID,           'KaapHinD.NOL',              SETTINGS_TYPE_STRING_CHAR,
    TARIFFIHINTA_FILE_ID,           'TarifHinD.NOL',             SETTINGS_TYPE_STRING_CHAR,
    KAAPELITYPE_FILE_ID,            'CabelTyp.NOL',              SETTINGS_TYPE_STRING_CHAR,
    DATA_PATH_ID,                   'Data',                      SETTINGS_TYPE_STRING_CHAR, //<''Sama 2x =Const +VAR
    LICENSE_PATH_ID,               {'Config\}'License',          SETTINGS_TYPE_STRING_CHAR, //<Sama kuin LICENSE_DEFAULT_PATH
 {  PAAVAL_WINDOW_LEFT_ID,          '0.9',                  SETTINGS_TYPE_DOUBLE_CHAR,      //''Config vex 12.0.05''''''''''''''''''
    PAAVAL_WINDOW_TOP_ID,           '0.1',                  SETTINGS_TYPE_DOUBLE_CHAR,
    EDV_WINDOW_LEFT_ID,             '0.1',                  SETTINGS_TYPE_DOUBLE_CHAR,
    EDV_WINDOW_TOP_ID,              '0.1',                  SETTINGS_TYPE_DOUBLE_CHAR,  }
    LANGUAGE_ID,                    'Suomi',                SETTINGS_TYPE_STRING_CHAR,
    PRINT_WINDOW_AFTER_NEWLINE,      SETTINGS_TYPE_BOOLEAN_TRUE, SETTINGS_TYPE_BOOLEAN_CHAR,
    PRINT_WINDOW_AFTER_NEWPAGE,      SETTINGS_TYPE_BOOLEAN_TRUE, SETTINGS_TYPE_BOOLEAN_CHAR,
    PRINT_WINDOW_TAIL,               SETTINGS_TYPE_BOOLEAN_TRUE, SETTINGS_TYPE_BOOLEAN_CHAR,
    PRINT_WINDOW_ZOOM_EDV,          '100',                       SETTINGS_TYPE_INTEGER_CHAR,
    PRINT_WINDOW_ZOOM_SULAKE,       '100',                       SETTINGS_TYPE_INTEGER_CHAR,
    PRINT_WINDOW_ZOOM_ZS,           '100',                       SETTINGS_TYPE_INTEGER_CHAR,
    PRINT_WINDOW_ZOOM_NJ,           '100',                       SETTINGS_TYPE_INTEGER_CHAR,
    PRINT_WINDOW_OPEN_CLOSED,        SETTINGS_TYPE_BOOLEAN_TRUE, SETTINGS_TYPE_BOOLEAN_CHAR,
    PRINT_WINDOW_PRINT_HEADER,       SETTINGS_TYPE_BOOLEAN_TRUE, SETTINGS_TYPE_BOOLEAN_CHAR
   );
                                                         //,+120.4:  UpsNyt =kehittelyn alla olevia UPS-juttuja, FA =ei vielä käytössä.
VAR HerjaAnnettu, UpsNyt, VaakaPysty,                    //<+1201:  DefsFileeseenOn jos on DefsFileeseenONdn -dirri .. ks. PaaValFrm.InfoNapMouseDown.
    OnRvSel{120.5i},JkUpsChk_Dlg{130.3},JkUpsChk_Cap{:1412},RePuFNCohi{+1415d},//,DefsFileeseenON (oliAikaisemminkin) korvaa aikaisemman DefsFileeseenNyt.
    JkUpsChk_Box,JkUpsVex, DefsFileeseenONb{1414e} :boolean; //<+1206. JkUpsChk_Dlg := EditSyoFrm´sa (EiEnää: OnCloseFrm´ssa).
    JkUpsChk_ed,DlgOli,SeurDlg :integer{1412}; //<+1412: 11=SjDlg  12 PjDlg  13=VvDlg  14=UpsDlg  2=JosaDlg  5=HävDlg  7=JkUpsDlg
    Ajotietoja :string;                                   //<Tähän on kuten Defsfileen jotta ei tulis "Invalid floating point .." erroria. IHME!?!?!?!?!?!?!
    NolaRekPFN,DefsFileeseenPolku{1201},                  //<+1203.1
    fKESKENsumC,fKESKENsumS,GListaEvFileN,GListaNjFileN,GListaMoFileN{120.5i} :string;
    DefsAjoja{+120.5}, DTot{+120.5i,120.5o:},DExc,KumTot, //<Alkusij. DTot,DExc Nola.dpr´ssa,  DefsAjoja käyttö PaaVal.PAS´ssa, käyttö Globals.PAS .
    TimEd1,TimEd2,TimEd3,TimEdY,                          //<+120.43: DefsFileen -kirjoituksen tarkistukseen kirjoitetaanko väliviiva +aikaleima, ks. Defs.PAS.
    Qsij, DlgI, DebWrCnt{1415b}, LicNro{1415e} :integer;  //<+141.1:  PAIKALLINEN ohjTieto BrekPointEhdollle (= ennen POINTkohtaa arvo xx, seurRv´llä 0 tms.)
    DebWr_herjaOnJo :boolean {1415f};                     //'1414fu:  DlgI -1=Cancel 0..=OK.
    tra6 :array[1..6] of Char;  //<1412: tra6=Syötössä käytävät(TeeSyoFrm) osoitteet. //'Antaa mahiksen Breikata vain tietyllä arvolla tietyssä kohdassa, ks. esim. EdvNewLask/laskeRJpit.
function fLisNoStrToInt (LisNoStr :string) :integer;      //<1415e
function FileOnEiEmpty(const AFileName: string): Boolean; //<+1414f:  Tr jos FileOn eikä empty. Haettavissa: fFileOnEi ..
function DRVok (pathN :string) :boolean;                  //<+1415f:  Siirrtty LueTalFilenReg´istä.
procedure UpsFileen (si :string);                         //<+1412.
function OtsRv31_txt :string;
function fFileExists(const FileName: string): Boolean;    //<+130.0   Täydellisempi näille: FileOnEiEmpty()
function xFileExists(const FileName: string): Boolean;    //<+130.2:  Loput FileExists -kutsut koevattu tällä, jotka nyt voidaan muuttaa hetkessä vaikka miksi.
function fDirectoryExists(DName: string) :boolean;

procedure fKESKEN(os :string) ;                           //<,120.6: PaaVal´ssa näytetään SUMMAKUTSUjen osoitteet (näkyy siis vasta kun ollaan PaaVal´ssa).
//nction ei(ss :string) :boolean;                         //<+130.1:  Korvaa CONST _<>'xxx' , FNC := AINA TR.
//nction f_(ss :string) :boolean;//overload;              //<+130.2e: Korvaa CONST _<>'xxx' , FNC := AINA TR.
Function IsDebuggerPresent :Boolean; StdCall;             //<,,Jani Järvisen e-mail 5.9.2002. Ei onaa FrmShow´n sisällä.
   External 'kernel32.dll' Name 'IsDebuggerPresent';{}    //'TRUE jos NOLAa ajetaan debuggerilla. +6.0.4 !!!!!!!! }
function isDeb :boolean;                                  //<+1414
function Ints(u :integer) :string;                        //+120.5o
procedure KirjoitaTestiKerta;
procedure ShowMsg (str :string);
//procedure DefsFileen (os: integer;  si :string);          //<+12.0.05  120.45,  vexKoe 1415f.

procedure SokIFileen (os :integer;  si :string);          //<+130.3u:  Vika virheen aiheuttanut SokI -kutsun SI jää näkyviin.
procedure DrawUpsFileen (si :string);                     //<+141.1
procedure JFileen (si :string);                           //<+130.3u:  UpsDlg´n seurantaan, oli Johdot.PAS´ssa.
procedure Wrb (si :string);                               //<+141.2:   EditSyoFrm´in kuvioille.
procedure YFileen (si :string);
procedure DefsFile3 (si :string);                         //<+120.43
procedure EtsiExenJuuri_TeeAjoDir; //(VAR Polku :string); //<,,Siirrtty tänne jotta myös NolaRek +NolaNet voi käyttää 12.0.05
function fDefsFN :string;
function fChkKaikille_Query (s1,s2 :string;  VAR sn :string) :boolean;
function fRePunKehi :boolean;                             //<+120.45, 1414d
function fRePunAjoJAKELUUN_pakkoTxtBaseChk :boolean;      //<+1412(16å4)
procedure DebWr (marg :integer;  so,si :string);          //<+1413=16å4
function fTeePolkuFileN(AlpPolku,AstiTunniste_FileNimiOsa :string) :string; //<+120.6
procedure Chk_LoytyykoNolaRekPFN_NOR_Kysy (RekFNimi :string);               //<+130.2
function fPCnNimi :string;
procedure ChkYliRvtDebWrInfo(ots :string; RiviLkm :integer); //<+1415: Käyttö myös PaaVal´sta.
CONST LFR=Chr(10)+Chr(13); //<ShowMessage yms. rivinvaihtoon.
      CR=Chr(10);          //<DefsFileen  yms. rivinvaihtoon.
    //Exs_='\\?\';         //<+120.5o  Tällä saatiin FCN FileExists toimimaan, siis:  if FileExists (Exs_ +FileN)  then ..  -1414d
                                         //,########################################################################################
implementation                           //,########################################################################################
uses DetEv{:120.5i:},PaaVal,Y_{+130.2e},EdvNew{:+130.2e:},Globals, Syotto{+141.1 ChkUps ym.},InfoDlgUnit{1415f};
                                         //,Sijoittaa GLOBAALEIHIN gAjoPath,gAjoConfPath´hin arvot, joita käytet. kaikkialla, ..Conf..
                                         // dirri on nyt AINA  X:\Projektit XE2\NolaKehi\bin\Config, missä KAIKKI tarpeelliset
                                         // TextBase.NOL ... *.BMP -tiedostot sijaitsevat alunperinkin eikä niitä NYT enää kopioida
                                         // jokaiseen ..Win64\Debug\Config´iin. ISO PERIAATTEELLINEN MUUTOS 12.0.05 ..
                                         //,########################################################################################
                                         //,########################################################################################
function fLisNoStrToInt (LisNoStr :string) :integer;      LABEL 1;   VAR n :integer;  sn :string; //+1415e.
   procedure tee;   begin
      LisNoStr := Trim(LisNoStr);
      while (LisNoStr<>'') and ((LisNoStr[1]='0') or (LisNoStr[1]=' '))  do //<Alkunollat ja tyhjät vex: 0001 => 1
         Delete(LisNoStr,1,1);
      SokI(LisNoStr,n);
      result := n;  end;
begin//FNC..............
   sn := LisNoStr;              //<Talteen, lopuksi tutkitaan todellinen LisNo.
  {LisNoStr := ' 000023';  tee;
   LisNoStr := ' 000 23';  tee;
   LisNoStr := ' 0 3';     tee;
   LisNoStr := ' 0000 23'; tee;
   LisNoStr := ' 00 023';  tee;}
   LisNoStr := sn;
   tee;  if n<0  then ;
end;

function OtsRv31_txt :string;      begin
(*
//if x=25  then EdvNewFrm.KuvausEdit.Text := tmp;  //<    EDV_COLOR_FONT_HEADER +Edv-pitka +'-row-' +Ints(90{ii})
//<f n="" s="" c="16711680">Lääkintä-IT <right>jkC16 0,4s  3,5/7,5kVA
           text := etuM('#',x+1) +myTextBase.Get(EDV_HEADERS + '-row-'+ Ints({x+1 +ai)}ii));
EDV_HEADERS                    = 'Edv-pitka';
   result := Globals.myTextBase.Get(EDV_COLOR_FONT_HEADER +{'Edv-pitka'}EDV_HEADERS +'-row-' +Ints(90{ii}));  end;*)
   result := EDV_COLOR_FONT_HEADER +'Lääkintä-IT <right>jkC 16A 0,4s  ' +fRmrkt0(edv.YLE.LaakPmu.ArvoRea,1,1) {EdvNewFrm.LaakMBx.Text} +'/7,5kVA';  end;
{function fFileExists(const FileName: string): Boolean;      begin //<+130.0:  Borland's sources for this function:
   Result := FileAge(FileName) <> -1;  end;}
function fFileExists(const FileName: string): Boolean;      {}VAR TimeDate : TDateTime;      {}begin //<+130.0:  Borland's sources for this function:
 //Result := FileAge('C:\Users\User\Desktop\aFile.xml', timeDate) {<> -1;}  end;
 //Result := FileAge(FileName) <> -1;  end;
   result := FileAge(FileName, TimeDate);  end;
function xFileExists(const FileName: string): Boolean;      begin //<+130.2:  Loput alp. FileExists korvattu nyt tällä.
   Result := fFileExists(FileName);  end;
{unction eFileExists(const FileName: string): Boolean;      begin //+130.2:  VäliaikainenTest.  //<130.2eµ:  Oli eFileExists ny kaikki vaihdettu fFile..
   Result := fFileExists(FileName);  end;}
function fDirectoryExists(DName: string) :boolean;      VAR rec :TSearchRec;  bo :boolean;      begin
   DName := Trim(DName);
   if DName=''
   then bo := false
   else begin
      if DName[Length(DName)]='\'  then Delete(DName,Length(DName),1); //Dir´rin lopussa ei sallita"\".
      bo := FindFirst(DName, faDirectory, rec) = 0;  end;
   result := bo;
end;                                                   //<,,Koklattu myös Exs_+sa (aina := FA).
        {sa := 'C:\Projektit XE2\NolaKehi\BIN';    if fDirectoryExists(sa)  then ;
         sa := 'C:\Projektit XE2\NolaKehi\BIN\';   if fDirectoryExists(sa)  then ;}

{Function IsDebuggerPresent :Boolean;
   begin result := false;  end;          //<'120.5no Kokeilua, aina := FA.}
function Ints(u :integer) :string;      begin result := IntToStr(u);  end;       //+120.5o
function isDeb :boolean;                begin result := isDebuggerPresent;  end; //<+1414

//###########################################################################################################################################################
function FileOnEiEmpty(const AFileName: string): Boolean;      VAR sr :TSearchRec;   begin//+1414f:  Tr jos FileOn eikä empty, OK testattu.
   Result := FindFirst(AFileName, faAnyFile, sr) = 0; //<Löytyi etsitty file.
   if Result then begin // file exists ...
      Result := sr.Size > 0;
      SysUtils.FindClose(sr);  end;
end;

//,¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶
//,¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶
//,¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶
                        {Return code/value	 Description =https://msdn.microsoft.com/en-us/library/windows/desktop/aa364939(v=vs.85).aspx
                        0- DRIVE_UNKNOWN      The drive type cannot be determined.
                        1- DRIVE_NO_ROOT_DIR  The root path is invalid; for example, there is no volume mounted at the specified path.
                        2- DRIVE_REMOVABLE    The drive has removable media; =a floppy drive, thumb drive, or flash card reader. Tai CD,DVD,muistitikku.
                        3  DRIVE_FIXED        The drive has fixed media; for example, a hard disk drive or flash drive.
                        4  DRIVE_REMOTE       The drive is a remote (network) drive.
                        5- DRIVE_CDROM        The drive is a CD-ROM drive.
                        6- DRIVE_RAMDISK      The drive is a RAM disk. --------------------------------}
                        {sZ := 'M:\'; //'J:\';  //sZ := 'C:\';         <,,Workkii hienosti =Tunnistaa oikein, koklattu.
                        Z := GetDriveType(PChar(sZ)); //http://www.delphitricks.com/source-code/systeminfo/get_the_drive_type.html =Siellä kutsuEsimrk.}
//,¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶
//,,,Uudella HP´ll'ä ajettuna KIRJOITTI (vahingossa tikun EXEllä ajetun polun REGiin (Z:\NOLA..) Näillä riveillä estetään tällaisten AJO/LUKU/TALLETUS REGiin.
//',,+1415f.¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶
function DRVok (pathN :string) :boolean;      VAR i,n,k :integer;  sp,sx :string;  {DEVELOPER1:} DArr,alpD :array of string; //<+1415f:  Siirrtty LueTalFilenReg´istä.
                                    //+1415f KAIKKI//'DArr´istä näkee hiirellä koko sisällön. alpD jotta DArr alkutilanne säilyisi.
   procedure EtsiDrvt_SetDarr;      Const Size=200;   VAR MyStr: PChar;  m,k,Lngth: Integer;  sa :string;    begin
    //fnOle := teePolkuDataFilen (oha);                  //<+1414fu,1415f: Jos eioo DataFileä, käytet tätä AINA, esim: ..\Data\Olet-Ev.NOE jne. ..
      GetMem(MyStr,Size);
      Lngth := GetLogicalDriveStrings(Size, MyStr);      //http://www.delphitricks.com/source-code/systeminfo/get_the_drive_type.html =Siellä kutsuEsimrk.
                                          //'C:\'  'D:\'  'E:\'  'F:\'  'G:\' (ei 'J:\' koska muistitikku eiOK jolloin ollaan NOLA..exeä ajamassa tikulta).
      for m := 0 to Lngth-1 do begin                     //<,,Etsitään kaikki DRIVt ja delataan joukosta kaikki Olet-Ev.NOE yms. REG-talletukseen SOPIMATTOMAT.
         if (MyStr[m]>='A')and(MyStr[m]<='Z') then begin //ListBox1.Items.Add(MyStr[m]+':\'); =Alp googlattu sorce.
            k := Length(DArr);
            SetLength(DArr,k+1);
            Darr[k] := (MyStr[m] +':\');  end;
      end;//for m                              //,alpD := DArr;  =EiKopioi.
      alpD := Copy(DArr,0,MaxInt);             //<DArr talteen jotta vertailtavissa ja todettavissa myöh, mitkä DRVt poistettu.
      m := Length(DArr);                       //GetDriveType,,=Google: "delphi getting all drives of computer" <,,1415f.
                                           //,,Tutkitaan + merkataan kelpaamattomat '' :lla (CD,DVD,muisti- t. USB-tikku #################################
      for m := 0 to m-1  do begin              //,3 (=F:\) voi olla USB-portin (lisä)kovalevy (mm.DEVELOPER1 koneessa). Jos Reg´n polkua eioo, luetaan vainUuden
         k := GetDriveType(PChar(DArr[m]));    //   ajon mukainen Application.ExeName´n mukainen polku. 3´han on siis kuin muistitikku !?!?!?.
         if k IN [0..2,5..6]                   //<Vain HardDisk(3) ja Verkko(4) kelpaavat, muut ovat lennossa vaihdettavia eikä läsnäolo AINA ajossa varma.
            then DArr[m] := '';                //<Delphissä ei ole DynArr´in itemin delausta. Nyt jätetään käyttämättä jos ''.
         if DArr[m]=''  then ;                 //<DArr =Nyt sis. S A L L I T U T  DRV´t polun alkuun =Poistettu esim. muistitikulta ajettu POLKU.
      end;
                            //YFileen('¿¶Y_.PAS/EtsiDrvt_SetDarr. ®®®®® alpD: ' +PChar(alpD) +' >>> ' +PChar(DArr));
      sa := 'alpD: ';  m := Length(alpD);
      for k := 0 to m-1  do
         sa := sa +alpD[k];  sa := sa +' >>>>> DArr: ';
      m := Length(DArr);
      for k := 0 to m-1  do
         sa := sa +DArr[k];
                            //YFileen('¿¶Y_.PAS/EtsiDrvt_SetDarr. ®®®®® alpD: ' +PChar(alpD) +' >>> ' +PChar(DArr));
      YFileen('¿¶Y_.PAS/EtsiDrvt_SetDarr. ®®®®® ' +sa);
                            //wri('EtsiDrvt_SetDarr, alpD: ' +PChar(alpD) +' >>> ' +PChar(DArr));
                            //RegFnVirhe := RegFnVirhe +Chr(10) +'¶ ' +PChar(DArr);
         FreeMem(MyStr);                          //ShowMessage('OnkoKo?'); Ei onaa => Err.
         //if Length(alpD)>0  then beep;            //Onko USB-kovalevy OK, onhan se kuin muistitikku? 1415f
      end;//EtsiDrvt_SetDarr

begin //DRVokJaFon....................
   EtsiDrvt_SetDarr;
   pathN := Trim(pathN);                 //TämäFNC tutkii, onko pathN polun DRIVE kelvollinen.#######################################################
   sx := ExtractFileDrive(pathN);
   n := Length(DArr);  result := false;  //<FA myös jos pathN=''.             ''kelvottomat merkattu tyhjinä ('').
   for i := 0 to n-1  do begin           //<Tutkit DArr´in rvt(=sp): pathN´n alusta
      sp := PChar(DArr[i]);
      if (sp>'')  then begin             //<Sopimaton DRV merkattiin DArr´iin tyhjällä('').
         k := AnsiPos(sx,sp{,pathN});    //<,,Vain HardDisk(3) ja Verkko(4) kelpasivat =on kelvollinen polku. Uudella HP´ll'ä MUISTITIKUSTA
         if (k>0)   then begin           //   ajettuna KIRJOITTI (vahingossa muistitikun EXEllä ajetun polun REGiin (Z:\NOLA...) ja SP eioo kielletty.
            result := true;          //''verrataan sx('C:') to sp('C:\') =OK, '\' ei vaikuta, vrt. POS.
            Break;  end;
      end;//if sp>''
   end;//for i                           //,Jos pathN eiooTaiOnTyhjä EIKÄ oletNimi. "C:\Projektit XE2\NolaKehi\BIN\Data\Olet-EvC.NOE"
   if Length(DArr)> 0  then ;
end;//DRVok
//,¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶
//,¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶
//,¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶

procedure UpsFileen (si :string);      begin end; (*CONST LF=Chr(10);  VAR Lst :TStringList;  fn,s :string;   begin //121.4
if isDebuggerPresent  then begin
   fn := gAjoPath +'$_B upsPeru.txt';  //C:\Projektit XE2\NolaKehi\BIN\...
   Lst := TStringList.Create;
   if fFileExists(fn)  then
      Lst.LoadFromFile(fn);
  {if Pos('JkUpsChk_ed',si) =0          //<Jos ei ole SI´ssä jo mukana.
      then s := s +'   JkUpsChk_ed= ' +Ints(JkUpsChk_ed) +LF;}
   s := si +LF;
   s := s +{   Frm.Caption= }'   "' +SyottoFrm.Caption +'"' +LF;
   s := s +'.  JkUpsChk_ed=' +Ints(JkUpsChk_ed) +' Src[1]JkUps=' +Ints(edv.Sorc[1].Josa.JkUps.ArvoInt);
   if edv.Sorc[1].Josa.JkUps.ArvoInt>0  then s := s +' §§§§§______________________________________';
 //s := s +LF;
  {s := s +'    edvSrc1JkUps=' +Ints(edv. Sorc[1].Josa.JkUps.ArvoInt) +LF;
 //s := s +'   edvoSrc1JkUps=' +Ints(edvo.Sorc[1].Josa.JkUps.ArvoInt) +' JkUpsChk_ed= ' +Ints(JkUpsChk_ed) +LF;  //<,,EDVO eioo esitelty tänne.
   s := s +'    edvEdkaJkUps=' +Ints(edv. Edka[Edi].   JkUps.ArvoInt) +' JkUpsChk_ed= ' +Ints(JkUpsChk_ed);// +LF;
 //s := s +'   edvoEdkaJkUps=' +Ints(edvo.Edka[Edi].   JkUps.ArvoInt) +' JkUpsChk_ed= ' +Ints(JkUpsChk_ed) +LF;
 //s := s +LF;                 //<Loppuun tyhjä rv.}
   Lst.Add(s);
   if Lst.Count>0  then ;      //wbeep([0,0]);
   Lst.SaveToFile(fn);
   Lst.free;
end; end;//*)

function fChkKaikille_Query (s1,s2 :string;  VAR sn :string) :boolean;      VAR {ohiC,}muuC :string;  {m :integer;  }boo :boolean;      begin //+130.2
 //ohiC := '£$'; //<Jos tämä koodi on ALUSSA, RESULT := false, jolloin muista kuin fRePunKehi -dirristä (NOLAKEHI) voi ajaa KUTEN neitsytkoneessa.
   muuC := '@#'; //<Jos tämä koodi on ALUSSA, RESULT := TR, jolloin kaikille käyttäjille annetaan mahd. kutsua jälempnä olevat ShowMessage tms.
   if NOT InputQuery(s1,s2, sn) //<Jos alussa on "@#" => fnc := TR.  '[Defs/fChk..Query]'
      then Halt;
   sn := Trim(sn);
  {m := Pos(muuC,sn);                 //<,Tällä kaikki käyttäjät saavat kutsukohdn läheiset ShowMwssage´t näkyviin.(1x Gkobals´sa).
   boo := m>0;                        //,PaaVal´in Asetus -napin Cick + [ssCtrl +ssAlt +ssShift +mbRIGHT], NÄKYY HINTTINÄ. +130.2
 //fRePunVainAjoKaikille := m>0;      //<Tämäkin tarpeen koska PaaVal ei vielä aina ole luotu (vrt. AsetBtn ssShift..jne. Nyt poistettu sieltä.)
   if RePunOhi  then }boo := true;     //<TR =Annetaan kaikkien käyttäjien nähdä kutsukohdan jälkeiset ShowMessage -tietoja.
   result := boo;
end;

function fPCnNimi :string;{fRePunPC :boolean;}      VAR size: DWORD;  name: array [0..MAX_COMPUTERNAME_LENGTH + 1] of char;  {boo :boolean;}    begin //+130.2
   size := MAX_COMPUTERNAME_LENGTH + 1;             //1414e. 1415d: kone kone:
   GetComputerName(name, size);       //<"Reijo-w7-PC"  "RAIJO-LAPPARI"  "REIJO-XP"  "HANNU-PC"
 //boo := (name='REIJO-W7-PC') OR (name='RAIJO-LAPPARI') or (name='REIJO-XP') or (name='HANNU-PC'); //<NÄITÄ EI NÄYTETÄ MUILLE KUIN RePun KONEISSA, joita
   result := name;  end;
                                                                      //,Testataan että on NOLAKEHIkoneista kyse.#############################################################
//function fRePunVainAjo :boolean;   begin result := false;  end;//+16å4
  (*VAR nimi :string;  boo :boolean;     begin //+130.2  Herjat näkyviin vain omissa koneissa esim. NolaRekPFN.
   boo := fRePunPC (nimi);                     //<nimi= "REIJO-W7-PC" tai "RAIJO-LAPPARI" tai "REIJO-XP" tai "HANNU-PC", jos joku näistä => result := TR.
//2 #################################################
   if RePunOhi  then boo := false;
// boo := true;          //<,POISTA NÄMÄ ############
// boo := false;         //<'+130.2
//###################################################
   if boo  then                       //<,Vain jos oma kone ajaa.
      fChkKaikille_Query('[Defs/fRePunVainAjo]' {+ohiC}, 'Computer name: ', nimi); //<Ei "@#" yms. enää, mutta antaa mahiksen ...
   result := boo;
end;//*)                                             //,Testataan että on NOLAKEHIkoneista kyse.#############################################################//
function fRePunKehi :boolean;      //begin result := false;  end;//+16å4
begin
   result := false;
end;//*)                                                  //,TARKISTAA ENNEN JAKELUVERSION LÄHETTÄMISTÄ että TextBase.NOL =OK.##########################
(*1415c,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
function fRePunKehi :boolean;      //begin result := false;  end;//+16å4 1415c::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                                   VAR path,sk,so,sn :string;  k,m :integer;  {boo :boolean;}      begin
   path := IncludeTrailingPathDelimiter (ExtractFilePath (Application.ExeName)); //+130.0:  VarmVuoksi. //\\Reijo-xp\e\Projektit XE2\NolaKehi\BIN
   path := AnsiUpperCase(path);                      //\\Reijo-xp\e\Projektit XE2\NolaKehi\Toimitus  <'Jommasta kummasta YLEENSÄ ajo
   sk := '\NOLAKEHI\';                               // PAITSI imuroituna esim  E:\_A_\...   drv="              'Drv=\\Reijo-xp\e
   k := Pos(sk, path);
   so := path +FnRePunEhdotOHI;   //<+1414d: Tuolla filenimellä voidaan kone asetta niin ettei NOLAKEHIä huomioida.
   sn := AnsiUpperCase(fPCnNimi); //,1414e: Vain w7(w10) -(pää)koneessa ajettaessa tulkitaan KEHIajoksi, läppäri, XP, Hannun koneissa EI, eikä jos
   m := Pos('REIJO-W7',sn);       //        NOLA..exe´ä ajetaan muusta hakemistosta, koeajossa esim. C:\_Aa\1414e\Nola =\NOLAKEHI\ puuttuu polusta.§§§§§
   result := false;               //<+1414f: ..might bee undefined.
   if NOT xFileExists(sn)  then                      //<Jos eioo fileaä =Ei laiteta ohitusta päälle. '§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§'
      result := (k>0) and (m>0);                     //<+120.5i  130.2  1414d.
   if result  then ;
end;//*)                                                  //,TARKISTAA ENNEN JAKELUVERSION LÄHETTÄMISTÄ että TextBase.NOL =OK.##########################
                                                          //<+1412(16å4)  On AIVAN PAKKO TEHDÄ uusi TextBase , jos esim Avuste1.INC, textBase..yms. on
                                                          //              muuttunut, muuten "MUUTOS.." tietoikkunaan EI TULE MUUTOSTIETOJA. KERRAN unohtui
                                                          //              ja kahden päivän ihmettely. TÄTÄ EHTOA EI SAA OHITTAA.!!!!! Ks. Global.PAS.
function fRePunAjoJAKELUUN_pakkoTxtBaseChk :boolean;      VAR path,sa :string;  k :integer;   begin
   path := IncludeTrailingPathDelimiter (ExtractFilePath (Application.ExeName)); //+130.0:  VarmVuoksi.
   path := AnsiUpperCase(path);                      //\\Reijo-xp\e\Projektit XE2\NolaKehi\Toimitus  <'Jommasta kummasta YLEENSÄ ajo
   sa := '\NOLAKEHI\';                               // PAITSI imuroituna esim  E:\_A_\...   drv="              'Drv=\\Reijo-xp\e
//sa := sa+'$';                                      //Testiä 1414e.
   k := Pos(sa, path);
   result := (k>0);                        //<+120.5i  130.2
end;
//###########################################################################################################################################################

procedure fKESKEN(os :string);      VAR sm :string;  {u :integer;}      begin//PRC näyttää DetEvFrn.aRich´issa ketjuna ao. herjat NOLAn alkuEdit´ssa.
   if fRePunKehi  then begin                                 //<120.5i: PaaVal´ssa näytetään SUMMAKUTSUjen osoitteet (näkyy siis vasta kun ollaan PaaVal´ssa).
      sm := '';  if fKESKENsumS<>''  then sm := ' ¨ ';       //<Väli edellisen jälkeen jos jo merkkejä.
      fKESKENsumS := fKESKENsumS +sm +os;
      if fKESKENsumC<>''  then begin                      //<+141.1
         fKESKENsumC := '<b>' +COLOR_RED +'Jossain </b>on jokin kokeilu <b>KESKEN</f></b>, seur. kutsutunnukset:';
         DetEvFrm.aRich.AddText(            fKESKENsumC +    '<br>');           //<,,Ks. PaaVal.Show / Chk..
      end;
      DetEvFrm.aRich.AddText(COLOR_BLUE +fKESKENsumS +'</f><br>');
      //DetEvFrm.Show;                                            //<141.1  En saa enää  vikax Joht.PA´siin lisäämiäni fKESKENsumS´iani näkyviin,
end; end;                                                         //        minkä takia PaaVal´issa on lisätty InputBox etsintäavuksi..

procedure Chk_LoytyykoNolaRekPFN_NOR_Kysy (RekFNimi :string);      VAR sa{,sc} :string;  {c,m,u :integer;  }boo :boolean;      begin //<+130.2
   //RekFNimi := RekFNimi +'X'; //<+130.2 TESTAILUA.
 //sc := REKFILE_NAME;          //<'NolaRek.NOR';
 //c := Length(sc);
   if NOT fFileExists(RekFNimi)                                      //<,,+130.2
      then sa := '(Vain DEVELOPER1´lle:) Ei löydy: ' +RekFNimi +', kyselyyn...!!!!!!!!!!!!!!!!!!!'
      else sa := '(Vain DEVELOPER1´lle:) Löytyy: "'  +RekFNimi +', polku OK.!!!!!!!!!!!!!!!!!!!';
   if fRePunKehi  then ShowMessage(                              //<,,Harja VAIN OMAAN KÄYTTÖÖN. SC =Palautuva koneen nimi.
       '2.2 (Vain DEVELOPER1): NolaRekPFN tarkistus, while -kysely jos eiOK: '  +LFR +LFR +
       'Exe=     "' +Application.ExeName +'"'                   +LFR +
       'Path=    "' +ExtractFilePath (Application.ExeName) +'"' +LFR +sa); {¶¶}
   while NOT fFileExists(RekFNimi)  do begin
      boo := InputQuery ('[1 NolaRekNOR_Kysy] NolaRek.NOR -fileä ei löydy.', 'Anna POLKU (\NolaRek.NOR tulee autom.):',RekFNimi); // OK=TR,  CANCEL=FA
      RekFNimi := Trim(RekFNimi);
     {m := Length(RekFNimi);
      u := Pos(AnsiUpperCase(sc),AnsiUpperCase(RekFNimi));
      if (u +c-1) =m  then                                // X:\JokuDir\JokuNimi\NolaRek.NOR  =OK.
      then if RekFNimi[m]='\'
           then RekFNimi := RekFNimi +sc
           else RekFNimi := RekFNimi +'\' +sc;}
      if NOT boo  then Halt;  end;//while
end;
                                                           //,Siirrtty 120.45 PaaVal´sta.
procedure KirjoitaTestiKerta;      CONST key='Ajokertoja'; // Vain omissa koneissa.   AJOKERTA AJOLASKURI AJOKERTALASKURI
      VAR Cfilen,sec,sn :string;  Cfile :TInifile;  n,iMa,iMi,iRe :integer;      begin
   iMa := PROGRAM_VERSION_MAJOR;   //12.0.0: Siirretty Edvn Lue_Talleta´sta (FileEv.INC) tänne.
   iMi := PROGRAM_VERSION_MINOR;
   iRe := PROGRAM_VERSION_RELEASE;
   Cfilen := gAjoPath; //+-12.0.05 oli: ExtractFilePath (Application.ExeName);  1205u: gAjoConfPath => gAjoPath ettei menisi ZIPpakettiin.
   Cfilen := Cfilen +'\_TestiajoKertaLkm.TXT'; //120.45: laskuriin lisätty 100 käsin (75 >= 175)
   Cfile := TInifile.Create (Cfilen);
   sec := IntToStr(iMa) +'.' +IntToStr(iMi) +'.' +IntToStr(iRe);
   sn := Cfile.ReadString (sec,key,'0');
   n := StrToInt(sn); //SokI(sn,n);
   n := n +1;                            //<Jokainen ajokerta kasvattaa ajokertaLkm +1 :llä.
   DefsAjoja := n;                       //<+120.45: Defs.PAS´ssa esitelty, tarve Globals.PAS/ChkAvusteet_vrtTextB_KysyDel´ssa.
   Cfile.WriteInteger (sec,key,n);
   Cfile.Free;
end;
                   //,TimEd..:= AlkuOdot.PAS/FormShow
function fIsoTimEro (VAR EdTime :integer) :boolean;      CONST Raja=4;  VAR ii, hh,mm,ss,ms, Ero :Word;      begin //+120.43
   DecodeTime(Now, hh,mm,ss,ms);                                  //' Raja =aikaero, jolla tai jonka jälkeen fnc := TR.
   ii := hh*60*60 +mm*60 +ss;                                     //<Now sekunteina, ms ei huomioida tässä.
   Ero := ii-EdTime;               //si := DateTimeToStr (FileDateToDateTime (FileAge(nm))); //<YhtLsk.PAS
                                   //System.DateUtils.SecondsBetween(Now, FileDateToDateTime (FileAge(nm))); //AThen: TDateTime): Int64;
   if (EdTime<=0) or (EdTime>0) and (Abs(Ero) >=Raja)             //<Jos eka ajo tai esim. oha aloitettu edPvnä ja nyt aikaisnAamulla.
      then result := true
      else result := false;
   EdTime := ii;                                                  //<ii sijoitetaan nyt uudeksi, mihin verrataan serKrlla.
end;//fIsoTimEro

function fDefsFN :string;      VAR sn,sa :string;      begin
   sn := ExtractFilePath(Application.ExeName);  //'+1414f.
 //sn := sn +DefsFileenKirjONdn_203{4};         //,120.5no: "_$DefsFileeseenON-204\$DefsFileenD.txt"  1414e: => ..ONdn  1414fu: Delphin herja:  potential loss..
 //sn := DefsFileenKirjONdn_203{4} +sn;         //,120.5no: "_$DefsFileeseenON-204\$DefsFileenD.txt"  1414e: => ..ONdn
   sa := DefsFileChkLueONdn_203;
   sn := sn +sa;                                //<,+1201: Nyt tehdäänkin samaan dirriin mikä on tunnistusDirri.
   result := sn;                                //<//<C:\Projektit XE2\NolaKehi\BIN\_$DefsFileeseenON-204\$DefsFileen.txt
   //ShowMessage ('DefsfilePath +nimi= ' +sn);  //<Tätä ei näköjään pääse keskeyttämään edes Ctrl +Alt +Del´illä. VARO VARO VARO VARO VARO VARO VARO VARO
end;

function InputQ(Promt,Info :string) :Boolean;     {VAR boo :boolean;     }begin // 2 vastausBtnia:  OK=TR,  CANCEL=FA
   result := InputQuery ('Tietoa:',Promt,Info);  end;
                          {boo := InputQuery ('EXE-polusta ei syntynyt kelvollista TextBase -polkua [' +gAjoConfPath +']:',
                                              'Anna TextBase.NOL -tiedoston PELKKÄ absol. polku:', Pn); // OK=TR,  CANCEL=FA}
//,,=========================================================================================================================================================
//###########################################################################################################################################################
//###########################################################################################################################################################
//#############,,Nämä kaikki PRCt kirjoittavat kukin omaan tiedostoon jos EXEn kanssa samassa DIRrissä on "_$DefsFileeseenON-204" niminen DIRRI.#############
//############# HUOMAA, että mm. AssignFile()´ssa täytyy POLKUKIN olla OK, muuten "File not found -% s".#####################################################
procedure ShowMsg_(str :string);      //begin end; //<120.4: Helpompi kommentoida tämä vex kuin nX alpPrc.
   procedure DFileen(si :string);     VAR ff :TextFile;  nm :string;      begin//+120.4 Tämä kirjoittaa $DefsFileen-Tst.TXT -fileeseen.
      if DefsFileeseenONb  then begin
         nm := fDefsFN;
         if Trim(nm)=''
         then ShowMessage ('Tiedostonimeä ei saaatu muodostetttua:  Defs.PAS/1') //<+120.43
         else begin
            nm := ChangeFileExt(nm,'-Tst.TXT');
            AssignFile(ff,nm);
            if fFileExists(nm)                                      //<130.0
               then Append(ff)
               else Rewrite(ff);
         end;
         if fIsoTimEro (TimEd2) then //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
            Writeln(ff,'============================Defs===== ' +DateTimeToStr(Now)); //+ ' ' + DateTimeToStr(time));
         Writeln(ff,si);
         Flush(ff);
         CloseFile(ff);
      end;
   end;//DFileen
begin//ShowMsg_.......
   //ShowMessage (str);                            //<Tämä korvattu ,,InputQ´lla. Sekin nyt ohitettu ettei enää pysähdyksiä.
   //InputQ('',str);                                 //<Vika lisäys. Antaa stringin leikattavaksi, parempi näin.
   DFileen(str);                                   //<,Sama viesti myös OMAAN ERITYISfileeseen.
end;//ShowMsg_
procedure ShowMsg (str :string);      begin end; //<120.4: Helpompi kommentoida tämä vex kuin nX alpPrc.
// ShowMsg_(str);  end;

procedure YFileen_ (si :string);      {-1415f. VAR ff :TextFile;  nm :string;}      begin//o>0 =Kirjoitetaan aikaleima.  Ks. myös DefsFileenZ
   DebWr(1,'+++',si);                 //1415f: Nyst KAIKKI seurantafilet kirjoitetaan DebWr´ssä, jolloin rivit ovat kronologiseesti.
(*  if DefsFileeseenONb  then begin                                             //jäljittämiseksi +120.43
      nm := ExtractFilePath (Application.ExeName);
      nm := nm +DefsFileChkLueONdn_203 +'\YFileen.TXT'; //<+1415b
      if Trim(nm)=''
      then ShowMessage ('Tiedostonimeä ei saaatu muodostetttua:  Defs.PAS/Y') //<+120.43
      else begin       //$DefsFileChkLue-203-YFileen.TXT         YFileen-YFileen.TXT
       //nm := ChangeFileExt(nm,'-YFileen.TXT'); //<-1415b
         AssignFile(ff,nm);
         if fFileExists(nm)
            then Append(ff)
            else begin
                 Rewrite(ff);
                 si := 'Koneen nimi:  ' +fPCnNimi +'  ' +si;  //<+1415eX.
            end;
        {if fIsoTimEro (TimEdY) then                           //<,Kun ehto vex, viivoja tulee 14x enemmän =joka 2. rv on viivarv :1414f testi/havainto.
            Writeln(ff,'==============================B===== ' +DateTimeToStr(Now)); //+ ' ' + DateTimeToStr(time));}
         si := 'Defs.PAS;  ' +si;                                                    //<+12.0.05
         Writeln(ff, si);
         CloseFile(ff);
       //Windows.Beep (1500,200);
      end;//else
   end;//if Defs..*)
end;//YFileen_
procedure YFileen (si :string);      begin YFileen_(si);  end;

procedure sFileen (s1,s2 :string);      begin end;{VAR ff :TextFile;  fn :string;     begin //Vain parin rivin kirjoittamiseen, LF po SI´ssä.
   if isDebuggerPresent  then begin
      fn := ExtractFilePath(Application.ExeName);
      fn := fn +'_sUpsJohto.txt';
      AssignFile(ff,fn);
      if fFileExists(fn)
         then Append(ff)
         else Rewrite(ff);
      Writeln(ff,s1);
      Writeln(ff,s2);
      Writeln(ff,'');
      CloseFile(ff);  end; end;}
procedure SokIFileen (os :integer;  si :string);      begin end;{VAR ff :TextFile;  fn,sa :string;      begin //+130.3uVika SI joka aiheittaa virheen näkyviin filen vikaksi rvksi.
   if isDebuggerPresent  then begin                              //<'OS on tunnisteNro. SokI -virheen etsimiseen: ErrSyy löytyi JFileen/StoSek´sta, ks.sieltä.
      fn := ExtractFilePath(Application.ExeName);
      fn := fn +'_SokIFileen.txt';
      AssignFile(ff,fn);                                  //<,Luo aina uuden fileen ja vika jää fileen jos SokI tilttaa.
      if FileExists(fn)
         then Append(ff)
         else Rewrite(ff);
      si := Trim(si);  sa := '';                          //<,Jos halutaan vain tyhjä rv.
      if si<>''  then
         sa := DateTimeToStr(Now);
      Writeln(ff,Ints(os) +'  '+sa +'  ' +si);
      CloseFile(ff);
   end; end;//SokIFileen}
procedure DrawUpsFileen (si :string);      begin end;(*VAR {ff :TextFile;  }fn,sx :string;  Lst :TStringList; {edTime,dtm :TDateTime; tc :Double;}  begin
   if isDebuggerPresent  then begin
      fn := ExtractFilePath(Application.ExeName);
      fn := fn +'_DrawUpsJohto.txt';
      Lst := TStringList.Create;
      if fFileExists(fn)  then
         Lst.LoadFromFile(fn);
      sx := DateTimeToStr(Now);
      if Lst.Count=0  then
         Lst.Add(sx);
      Lst.Add(si);
     {edTime := StrToDateTime(Lst[0]); //<OK
    //dtm := DateTimeToStr(System.DateUtils.SecondsBetween(Now, edTime));//IncSecond(Now,10)  if dtm>2  then ;  //<SecondsBetween ei tunnistu.
      tc := Now - edTime;
      if tc<>0  then ;}
      Lst.SaveToFile(fn);
      Lst.free;
   end;//if isDebuggerPresent
end;//DrawUpsFileen *)

procedure Wrb (si :string);     begin end;//VAR ff :TextFile;  {fn,sx,sa :string;  Lst :TStringList;}       begin //EditSyoFrm -kuvioille. +1412.
 (*if isDebuggerPresent  then begin
      {fn := ExtractFilePath(Application.ExeName);
      fn := fn +'_EditSyoFrm-jälkiä.txt';
      Lst := TStringList.Create;
      if fFileExists(fn)  then
         Lst.LoadFromFile(fn);
      sx := DateTimeToStr(Now);
      if Lst.Count=0  then
         Lst.Add(sx);
      Lst.Add(si);
      Lst.SaveToFile(fn);
      Lst.free;}
      AssignFile(ff,YLstFN);   //<YLstFN := PaaVal.PAS´ssa.
      if fFileExists(YLstFN)
         then Append(ff)
         else Rewrite(ff);
      //si := Trim(si);        //<Ei hyvä: sisennys häviää
      Writeln(ff,si);
      CloseFile(ff);
   end;//if isDebuggerPresent
end;//Wrb}*)
procedure JFileen (si :string);      begin end;(*VAR ff :TextFile;  fn,sa :string;  Lst :TStringList;  //Ups-välitietojen näyttämiseen.
   function StoSek(lahtien :integer;  si :string;  VAR asti :integer) :integer;      VAR m,intg :integer;  se :string;      begin
      m := lahtien;   se := '';
      while (m<Length(si)) and (si[m]<>':') and (si[m]<>' ')  do begin
         if si[m] IN ['0'..'9']  then         //''''''''''' tämä poisti virheen =luettiin ohi numeroiden ja syntyi liian iso integ.
            se := se +si[m];
         m := m+1;
      end;
      m := m+1;  asti := m;                             //<Hypätään seur. ":"n yli, ASTI =seur SilmukanAlkupiste.
      //SokIFileen(0,si +' @@@ Lahtien:' +Ints(lahtien) +' asti:' +Ints(asti) +' ==se:' +se); //<TÄMÄ ON HYVÄ, HAVAINNOLLINEN.
      {if Length(se)>=Length('2147483647') //2147483647=MaxInt(+/-)    34212721101 aiheuttaa errorin.  VIRHE:  SE´hen luettiin ohi vikan nron.
         then ShowMessage(se +Chr(13)+Chr(10) +'2147483647 =MaxInt(+/-) ylittyy (11 mrk).');}
//      if se[i]='0'  then Delete(se,1,1);
      if se=''  then se := '0';                         //<Ehkä tarpeeton.
      SokI(se,intg);   result := intg;     ;            //<Tun/Min/Sek selvitetään kutsukohdassa.  Pos('05212721101',se) >0
   end;
                                                                                      //,BreakPnt pysäyttää ja tässä tehdään tyhjäRivi = rytmittää järkevästi.
   function pysahdys :boolean;       VAR i,o,t, ta,ts,te,tu :integer;  SL,su :string; //<Pysähdys =TR jos aikaero >1s (now´n ja te´n välillä.
      procedure SokIFileenVak(os :integer);      begin SokIFileen(os,'SL: ' +SL +'  t:' +Ints(t) +' ta:' +Ints(ta) +' ts:' +Ints(ts) +' te:' +Ints(te));  end;
   begin//pysahdys...........................
      for i := Lst.Count-1 DownTo 0  do begin
         SL := Lst[i];
         o := Pos(':',SL);
         if o>0  then begin
            t := o;
            while (t>0) and (SL[t]<>' ')  do           //<Peruutetaan edeltävään väliin =Tutkitaan aikaleima, josta lasketaan sekunneiksi.
               t := t-1;  SokIFileenVak(1);
            ta := StoSek(t,SL,ts);                     //<TS =seur alkuOs(lahtien). TA =aika sekunteina (hh => mm => ss).
            te := ta *60*60;                           //<Tunnit min+sek´ksi.
                          SokIFileenVak(2);
            t := ts;
            ta := StoSek(t,SL,ts);                     //<TS =seur alkuOs(lahtien).
            te := te +ta*60;                           //<Min sek´ksi.
                          SokIFileenVak(3);
            t := ts;
            ta := StoSek(t,SL,ts);                     //<TS =seur alkuOs(lahtien).
            te := te +ta;                              //<Sek.
                          SokIFileenVak(4);
            tu := 0;                                   //<Ehkei tarvetta.
            su := DateTimeToStr(Now); //BreakPoint tässä ja odotus ~2s =>Result := TR.<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
               sFileen(SL,su);                         //<Pääsee näkemään yhdet peräkkäiset stringiparit, Chr(10)+Chr(13) ei worki.
SokIFileen(5,'');                             //<Tyhjä rv väliin. KOE
            o := Pos(':',su);
            if o>0  then begin
               t := o;
               while (t>0) and (su[t]<>' ')  do         //<Peruutetaan edeltävään väliin =Tutkitaan aikaleima, josta lasketaan sekunneiksi.
                  t := t-1;  SokIFileenVak(11);
               ta := StoSek(t,su,ts);                   //<TS =seur alkuOs(lahtien).
               tu := ta *60*60;                         //<Tunnit min+sek´ksi.
                             SokIFileenVak(12);
               t := ts;
               ta := StoSek(t,su,ts);                   //<TS =seur alkuOs(lahtien).
               tu := tu +ta*60;                         //<Min sek´ksi.
                             SokIFileenVak(13);
               t := ts;
               ta := StoSek(t,su,ts);                   //<TS =seur alkuOs(lahtien).
               tu := tu +ta; SokIFileenVak(14);         //<Sek.
            end;
            result := tu > te+2;                        //<Pysähdys on TR jos >2s edellisestä leimast (pienempi erokin riittäisi)
            SokIFileen(15,'');                          //<Tyhjä rv väliin.
            Break;
         end;
      end;
   end;//pysahdys
begin//JFileen  130.3u:  JkUpsChk_Dlg seurantaan.
   if isDebuggerPresent  then begin
      fn := ExtractFilePath(Application.ExeName);
      fn := fn +'_UpsJohto.txt';
      Lst := TStringList.Create;
      if FileExists(fn)  then
         Lst.LoadFromFile(fn);
      sa := '';
     {if pysahdys  then                                  //<-141.1:  Ei enää tarvis.
         sa := 'BreakPnt:';}                             //<Jos aikaviive >~1s, syynä lienee BreakPoint ja merkiksi tyhjä rivi.  Chr(10)+Chr(13) ei worki.
{     AssignFile(ff,fn);
      if fFileExists(fn)
         then Append(ff)
         else Rewrite(ff);
      if sa<>''  then begin
         Writeln(ff,'´');
         Writeln(ff,'´');
         Writeln(ff,sa);  end;
      Writeln(ff,sa +DateTimeToStr(Now)+ '  ' +si);
      CloseFile(ff);}
      if sa<>''  then begin
         Lst.Add('');                                  //<"Pysähd.."  Väliriv sen eteen.
         Lst.Add(sa);  end;                            //<"Pysähd.."  Väliriv sen eteen.
      if si<>''
         then begin
              if Pos('1/7=',si) >0  then Lst.Add('\==0=====\=====0=====\=====0=====\=====0=====\=====0=====\=====0=====\=====0=====\=====0\=====\=====0\==');
              with SyottoFrm  do
              sa := 'UpsChk.Chkd=' +fBmrkt_(JkUpsChk.Checked,2) +' .ChVis=' +fBmrkt_(JkUpsChk.Visible,2) +' JkUps: sr[1]=' +Ints(edv.Sorc[1].Josa.JkUps.ArvoInt) +' edv[edi(' +Ints(edi) +')]=' +
                    Ints(edv.Edka[Edi].JkUps.ArvoInt) +' JkUpsI=' +Ints(JkUpsInt) +' UpsNytVex=' +Ints(UpsNytVex) +' JkUpsChk_Dlg=' +fBmrkt_(JkUpsChk_Dlg,2) +' SyoKut='+Ints(SyoKut) +' ';
              si := sa +si; //<'+141.1            //'+141.1 =KAIKKIEN RIVIEN LOPPUUNVAKIO-OSA. +1412: UpsNytVex +JkUpsInt
            //si := si +' s[1].UpsInt=' +Ints(edv.Sorc[edi].Josa.JkUps.ArvoInt) +' e[1].UpsInt=' +Ints( edv.Edka[1].JkUps.ArvoInt);
              Lst.Add(si);                                               //<+1412
             {if Trim(si)[1]='>'  then Lst.Add(                          si -1412)
                                  else Lst.Add(DateTimeToStr(Now)+ '  ' +si);  }end
         else Lst.Add('');                             //<Haluttiin vain tyhjä rivi.
      Lst.SaveToFile(fn);
if Lst.Count>50  then ;
      Lst.Free;
   end;//if isDebuggerPresent
end;//JFileen '''''''''''''''''''''''''''*)

procedure DefsFile3_(si :string);     VAR ff :TextFile;  nm :string;     begin //Kirjoittaa filenimitietoja ym. filetieoja %s -virheilmoituksen
   if DefsFileeseenONb  then begin                                             //jäljittämiseksi +120.43
      nm := fDefsFN;
      if Trim(nm)=''
      then ShowMessage ('Tiedostonimeä ei saaatu muodostetttua:  Defs.PAS/2') //<+120.43
      else begin
         nm := ChangeFileExt(nm,'-FIL.TXT');
         AssignFile(ff,nm);
         if fFileExists(nm)
            then Append(ff)
            else Rewrite(ff);
      end;
      if fIsoTimEro (TimEd3) then //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
         Writeln(ff,'============================Defs===== ' +DateTimeToStr(Now)); //+ ' ' + DateTimeToStr(time));
      Writeln(ff,si);                                         //'Kirjjoitetaan jakoviiva ja aikaleima jos aikaeroa >=4s.
      Flush(ff);
      CloseFILE(ff);
   end;
end;//DefsFile3_
procedure DefsFile3 (si :string);   begin end;//Kirjoittaa filenimitietoja ym. filetieoja %s -virheilmoituksen
// DefsFile3_(si);  end;                        //jäljittämiseksi +120.43
//-------------------------------------------------------------------------------------------------------------------------------------------------------
{procedure KirjoitaAina(si :string);      CONST raja=1000;   VAR ZLst :TStringList;  fnZ,ajoPath :string;       begin//+120.5no
   ajoPath := IncludeTrailingPathDelimiter (ExtractFilePath (Application.ExeName)); //IncludeKeno turha, "\" tulee loppuun muutenkin.
   fnZ := ajoPath +'_Ajotietoja.txt';
   ZLst := TStringList.Create;
   try
    //if NOT FileExists(Exs_+fnZ)
      if NOT fFileExists(fnZ)
      then Zlst.Add(si)
      else begin
         ZLst.LoadFromFile (fnZ);
         while ZLst.Count>raja  do
            ZLst.Delete(0);
         ZLst.Add(si);  end;
      ZLst.SaveToFile (fnZ);
      ZLst.Free;
   except                                       //,,Vika Writeln aiheutti Exceptionin eikä SI mennyt fileeseen, nyt lisätään tällä konstilla muiden jatkoksi.
      ShowMessage('µ' +IntToStr(ZLst.Count) +' EXEPTION.');
   end;//try except
end;//KirjoitaSi}
//-------------------------------------------------------------------------------------------------------------------------------------------------------
{function fAikavaliVii :string;      VAR ss :string;      begin  ss := ''; //Ei ainoatakaan kutsua.
   if fIsoTimEro (TimEd1) then
     ss := '============================Defs===== ' +DateTimeToStr(Now);
   Result := ss;
end;//fAikavaliVii}

function qFileSize(fileName :String) :Int64;      VAR info: TWin32FileAttributeData;      begin //120.5f   Yritin:  FindFirst(..rec) /nFileSizeHigh+..Low
   result := -1;
   if NOT GetFileAttributesEx(PWideChar(fileName), GetFileExInfoStandard, @info)
      then EXIT;
   result := info.nFileSizeLow or (info.nFileSizeHigh shl 32);
end;

procedure ChkYliRvtDebWrInfo(ots :string;  RiviLkm :integer);     VAR ss,FN,exn :string;  w,RiviMax :integer;   begin //1415f: Kokonaan uusittu. Yhdistetty PaaVal + Defs.
   RiviMax := 5000; //<2000 meni yhdellä johdonlisäyksellä yli.
   if (ChkDebWr_kertoja=0) or (RiviLkm>Rivimax)
   then begin
      ChkDebWr_kertoja := ChkDebWr_kertoja+1;
      FN := ExtractFilePath(Application.ExeName);            //<,,FN= ..'\$_DebWr.txt'.
      exn := 'NolaXX.EXE';//ExtractFileName(Application.ExeName); XX -bittisyys häviää, näköjään.
      FN := FN +DefsFileChkLueONdn_203;
      FN := FN +'\$_DebWr.txt';                              //<+1414f.
      if fDirectoryExists(FN)  then begin
         ss := '[' +ots +']' +CR +
               '"' +DefsFileChkLueONdn_203 +'" -niminen ALIHAKEMISTO on samassa hakemistossa "' +{gAjoExeN}exn +'"´n kanssa,'+CR +
               'mikä OHJAA kirjoitettavaksi tuon alihakemiston ao. tekstitiedostoihin polkujen ja algoritmien '+CR +
               'alkutietoja kehitys- ja virheselvittelyyn. Tämä HAKEMISTO saattaa olla tarkoituksella asetettu,' +CR +
               'mutta jos haluat, voit ohittaa tämän toiminnan keskeyttämällä ajon ja poistamalla em. alihakemisto,' +CR +
               'muuten tämä ilmoitus toistuu.' +CR;
            if (RiviLkm>RiviMax)  then //< DebWrCnt := Defs.PAS r1209.
               ss := ss +'Tuossa alihakemistossa on tiedosto, jonka koko on jo yli ' +Ints(RiviMax) +' (nyt ' +Ints(RiviLkm) +') riviä, eikä se ole enää'+
               CR +'tarkoituksenmukaista. Poista koko hakemisto tai nimeä se muuksi.' +CR +
               '>>>>>>>>>>>>> NYT AJO KESKEYTETÄÄN.<<<<<<<<<<<<<';                 //,,Kylläkin ChkDebWr_kertoja>0(?) voisi käydä?
         if NOT DebWr_herjaOnJo or (RiviLkm>RiviMax)  then begin                   //<+1416: Tuli n. 1x aluksi ja vielä 2x perään => DebWr_herjaOnJo.
            if RiviLkm>RiviMax  then w := MessageDlg(ss, mtInformation,[mbOk{1}],            0)  //<Ei Abort -nappia koska muutenkin jo keskeytetään.
                                else w := MessageDlg(ss, mtInformation,[mbOk{1},mbAbort{3}], 0);
            if (w>1) or (RiviLkm>RiviMax {+1415f}) then Halt;
            DebWr_herjaOnJo := true;  end
         else if RiviLkm>RiviMax  then Halt; //<+1416.
      end;//if DefsFileChkLueONdn_203
      if DebWr_herjaOnJo  then ;
       //if (MessageDlg(ss, mtInformation,[mbOk{1},mbAbort{3}], 0) >1) or (RiviLkm>RiviMax {+1415f}) then Halt;
         //w := InfoDlg_ (ss, mtCustom, 'Keskeytä','Jatka','','',  '','','','', TRUE{CutInfo},FALSE{Bxkin},ss,ss); //<Tämä workkiAikaismn PaaVal´ssa, NytEI.
   end;//if ChkDebWr_kertoja...
end;//ChkYliRvtDebWrInfo
//=====================================================================================================================================================
                                                   //- LstTxt=´iin luetaan FN, mistä luetaan rvt, joista kukin verrataan loppuihin LstTxt´sta ja kukin
                                                   //  samaRv kasvattaa lukumäärää ja kirjataan "3 kpl: +KutsuTeksti esim. "Y_.PAS 1/3 XYZ 123..." tms.
                                                   //1415f: KOKONAAN uusittuu.
procedure DebWr (marg :integer;  so,SI :string);   {begin end;}VAR FN,QN,sm,sc{,ss} :string;  LstTxt,LstQ :TStringList;  ai :integer; //ff :TextFile{1414f};
                                                //Idea: Käydään lopuksi (kun marg<0) koko file läpi ja tutkitaan aoPRCn kutsukerrat ja ne lisätään.
   procedure SijKutsuLkmt;      VAR i,j,u,m,iA,iB,Osia,Samoja :integer;  SU,SX :string;  ArrViiOs :array of integer;  ArrDeb :array of string;

   procedure ediF (Ots :string;  LstSI :TStringList);      VAR {FN,}sa :string;  u,k :integer;  {ff :Text{File;}  LstB :TStringList;   begin //+1415f.
    //if isDeb  then begin  //<Sittenkin myös loppukäyttäjillekin.
      if fDirectoryExists(DefsFileChkLueONdn_203)  then begin
        {FN := ExtractFilePath(Application.ExeName) +DefsFileChkLueONdn_203;
         sa := ExtractFileName(Application.ExeName);
         FN := FN +'\' +ChangeFileExt(sa,'-XXX.txt'); //< ='C:\Projektit XE2\NolaKehi\BIN\Nola-XXX.txt'}
         LstB := TStringList.Create;
         if fFileExists(QN)  then LstB.LoadFromFile(QN); //<Ei luetakaan vanhaa alle, nyt taas LUETAAN, HYVÄ kunhan ei liian monia Lst´ejä peräkkäin.
         u := LstSI.Count-1;         //<Täsä tulee edelleenkin herja, ei auta vaikka LstSI olisi VAR LstSI.<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
         LstB.Add(Ots +',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,');
        SetLength(ArrDeb,0);          //<Tyhjätään.
         for u := 0 to u  do begin
             sa := LstSI[u];  if u=0  then sa := '[] ' +sa; //<Jotta saumakohta uudelle Lst´lla erottuisi.
            {if u=0  then n := 20  else n := 17; //"[] " takia ettei selkoteksti lyhenisi liikaa. SAn lyhentäminen hyvä kehiVaiheessa.
             if Pos('====',sa)>0
                then sa := '====...'     //<'Ettei tulisi tolkuttoman pitkä välirivi '=' -merkkejä, olisi hiirinäytölle ahdas.
                else sa := Copy(sa,0,n); //<Kopioidaan näkyviin vain 7 mrk.}
             LstB.Add(sa);
             k := Length(ArrDeb);   //<,,ArrDeb vain debugin takia:  hiirellä osoitettuna kaikki tekijät näkyvät DYNarraystä heti.
            SetLength(ArrDeb,k+1);
             ArrDeb[k] := sa;
             LstB.SaveToFile(QN); //<Ei talletetakaan, ehkä sittenkin talletus, OK.
         end;
      end;{if fDir..} end;//ediF

     {procedure seivaa (LstSI :TStringList);   VAR FN :string;   begin
      if isDeb  then begin
         FN := '$_' +ExtractFileName(Application.ExeName); //< $_Nola-XXX
         FN := ExtractFilePath(Application.ExeName) +FN;
         FN := ChangeFileExt(FN,'-XXX.txt'); //< ='C:\Projektit XE2\NolaKehi\BIN\Nola-XXX.txt'
         LstSI.SaveToFile(FN);  end; end;}

   begin//SijKutsuLkmt _________________________________________________________________________________________________________________________________
             if isDeb  then begin  FN := 'C:\Projektit XE2\NolaKehi\BIN\$DefsFileChkLue-203\$_DebWr.txt';
               {x} u := MessageDlg ('KEHITYSTIEDOSTON KOPIOINTI on nyt ohitettu, KEHItoiminnan päällelaitto:  ' +Chr(10) +'etsi "..Defs.PAS/SijKutsuLkmt" ja'+
                                 ' "isDeb"  ja poista kommenttisulut {CopyFile..)',
                                 MtConfirmation, [mbOK,mbAbort],0); {x}
                if u=idAbort  then Halt; //Application.Terminate; Halt=OK.  ,,Kopioidaan KEHIvaiheessa $_DebWr.txt´ksi tarkoitukseen tuunattu .TXT -file.
              {x CopyFile(PChar('C:\Projektit XE2\NolaKehi\BIN\$DefsFileChkLue-203\Kehi $_DebWr.txt'),PChar(FN),false);  LstTxt.LoadFromFile(FN);  x}end;
      LstTxt.Add('=============================================================================================================');

{ArrViiOs}                                  //<1415f: Etsitään iteroinnin ViiRajaRvNot= "=====.." (väliVii) TAI Count-1.
   LstQ := TStringList.Create;              //'Pakko Create ekax.
   LstQ.Assign(LstTxt);                     //<LstQ=LstTxt:  Samasta otetaan etsittävä ja elataan samaRvlä ja Etstittävän Rvn tilalle lopuksi Lkm +AlpRv.
   Osia := 0;                               //<®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®
   for i := 0 to LstTxt.Count-1  do
   if (Pos('=====',LstTxt[i]) >0) or (i=LstTxt.Count-1)  then begin
      Osia := Osia +1;                      //,®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®
      iA := Length(ArrViiOs);               //<Oltava Array of INTEGER, TStringList ei käy (Str pitäisi muuttaa Int´iksi).®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®
      SetLength(ArrViiOs,iA+1);                            //,= 6, 12, 17 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      ArrViiOs[iA] := i;        //i=0...                   //<'ArrViiOs[k]=(i)...: Väliviivojen osoitteet(rvNot) LstQ´ssä, siis 0...
   end;  if ArrDeb<>NIL  then ;                            //'Osia =ValiVii -välejä (sis vika os jolla ei päättävää väliVii´ta).
         //EDIF('LstQ',LstQ);               //<Kehivaiheessa näkyy rvtien alkup.tilanne.
                                      //  [0] [1] [2] =[ArrViiOs]
{LstQ}                                //u= 6, 12, 17                       ____                           ________
   for u := 0 to Osia-1  do begin     //<,,Kukin väliViivojen väli luetaan LstQ´stä ja viivojen osoitteet ArrViiOs´aan.
      iB := 0;                        //iB =väliViiOsa 0..Osia             """"                           """"""""
      if u>=0  then iB := ArrViiOs[u];  //if isDeb  then wBeep([500,100]); //Piippaa kun vaihtoi U -arvon seuraavaan.
      iA := 0;                        //,iA =ed. VäliRvien eka arvoRv.  +1 jottei suotta etsittäisi/verrattaisi väliVii´voja. Ilman +1 ===rv näkyy, paree.
      if u>0  then iA := ArrViiOs[u-1];// +1;           //<Kun U=0, ei kohdalla ole väliVii´vaa, joten 0=OK, muuten iA := ekaArvoRv ED.väliVii´n jälkeen,
      if Pos('=====',LstQ[iA])>0  then iA := iA+1;    //<Ettei vrtailtaisi väliVii´vaa JA ...
              if iB<0  then ;
      for j := iA to iB  do begin                         //<,,Etsitään, lasketaan ja TYHJÄTÄÄN samaRvt. Kun samaLkm selvinnyt, SAMANLAISETrvt lasketaan
         Samoja := 0;                                     //   ja KORVATAAN TYHJällä Rvllä. AlpLuetunRv´lle sijoitetaan:  "ƒ 3 kpl: tutkittu rvStr.."
         SU := Trim(LstQ[j]);                             //   =KOKO AJAN VAIN luetaan rvjä ja kirjoitetaan VAIN KERRAN jo ohitetulle rvlle, tilanne=OK.
         m := iB;//ArrViiOs[u-1];                         //'SU=Tätä verrataan seurRveihin.
         for i := (j+1) to m  do begin      //<J oli vrtailtavaRv LstQ´ssä.
                  //LstQ.Add('u:'+Ints(u) +' j:'+Ints(j) +' i:'+Ints(i));
                  //EDIF('LstQ',LstQ);                    //<'Kehivaiheessa, tulee >5000 rviä.
            SX := Trim(LstQ[i]);                          //<,Eikä SamIso fncIsonnusta saa käyttää, voihan olla muutan sama kutsu...   (j=1) and (i>=6)
            if (SU<>'') and (Pos('=====',SU)=0) then      //<VäliViivoja EI ETSITÄ EIKÄ MERKATA mutta sijoitetaan LstQ´hun.
            if (SU=SX)  then begin                        // TAI: k := Pos(SU,SX);     u:2 j:0 m:2
               Samoja := Samoja+1;                        //,Päivitetään alpRv samantien, eli Samoja kaikkiaan tähän asti, +1=Lukemaan myös alpVrtluRv.
               SU := 'ƒ ' +fImrkt0(Samoja+1,2) +' kpl: ' +SU;
               LstQ[j] := SU;
               LstQ[i] := '';  end                        //<KORVATAAN TYHJällä Rvllä, LOPUKSI tyhjäRvt delataan.®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®
            else if  ((i=m) and (Samoja=0)) and           //<  (i=m) =VäliViin kohdalla, (Samoja=0)=~, (u>0)=Ei EkaRv, (u=0) and (i>0) =ei EkaRv.
                     ((u>0) or (u=0) and (i>0))  then     //<,Ehto ehkä muokattavisa yksinkertaisemmaksi.
            if Pos('Tässä ovat PRC Deb',SU)=0  then begin //<"Tässä ovat PRC Deb..." = ja sen eteen tulee "[]"  EDIF´ssä.
               SU := {'£}'ƒ ' +fImrkt0(Samoja+1,2) +' kpl: ' +SU;
               LstQ[j] := SU;  end;                       //<Kun on kaikki rvt käyty viiVälistä läpi eikä osumia ole, merkataan tämä yksittäinenkin rv.
         end;//for m    u:2 j:3 m:4                       //'j=Rv, kun SU sai arvon =sijoitettiin [j]
      end;//for j
      //EDIF('LstTxt1',LstQ);
   end;//for u
//EDIF('LstTxt1',LstQ);                                   //<Kehivaiheessa näkyy tyjätyt rvtkin.
   u := 0;
   while (u<=LstQ.Count-1)  do begin                      //<,,Etsitään ja delataan tyhjät rvt, jotka tehtiin LkmEtsinnässä.
      if Length(Trim(LstQ[u]))=0
         then LstQ.Delete(u)
         else u := u+1;  end; //<Jos juuri delattu rv, uusi rv tuli ed.paikalle joten vain jos eiDelattu, U kasvaa, muuten del menee seurn ohi ja seur.
   LstQ.SaveToFile(QN);       // tyhjäRv jää delaamatta, TODETTU.
EDIF('LstQ2',LstQ);
if LstQ.Count>0    then ;
if LstTxt.Count>0  then ;
if ArrDeb<>NIL  then ;
LstQ.Free;
end;//SijKutsuLkmt *)

begin//DebWr....................................................................... ,,1414fu: Kokonaan uusittu.
   LstTxt := TStringList.Create;
   FN := ExtractFilePath(Application.ExeName);            //<,,FN= ..'\$_DebWr.txt'.
   FN := FN +DefsFileChkLueONdn_203;
  {if fDirectoryExists (FN) then begin }{PaaValFrm.ZKoeMem2.Visible := true;      //1415f
                                         PaaValFrm.ZKoeMem2.Lines.Clear;  PaaValFrm.ZKoeMem2.Lines.Add(FN);} //<'Nyt tarpeeton: PolkuChk nyt LueTalFilenReg´issä (USB yms.)
   FN := FN +'\$_DebWr.txt';                     //<+1414f:  C:\Projektit XE2\NolaKehi\BIN\$DefsFileChkLue-203\$_DebWr.txt
   QN := ChangeFileExt(FN,'-EsiintymäLkmt.txt'); //<+1415f:  C:\Projektit XE2\NolaKehi\BIN\$DefsFileChkLue-203\$_DebWr-EsiintymäLkmt.txt

   if {isDeb  or }fDirectoryExists(DefsFileChkLueONdn_203)  then           // $_DebWr-EsiintymäLkmt.txt
   if NOT FileOnEiEmpty(FN) //{fFileExists}
   then begin                                             //<,Jos ei vielä sis. rivejä =Tässä ekan rvn sijoitus.
      LstTxt.Add('Tässä ovat PRC DebWr´n (..LueTal_FileLista..) kutsujen kirjaukset.');
      LstTxt.Add('Koneen nimi:  ' +fPCnNimi);                //<+1415eX.
      LstTxt.Add(sm +so +' ' +SI);
      LstTxt.SaveToFile(FN);
      LstTxt.Free;  end
   else begin
      LstTxt.LoadFromFile(FN);
      //if LstTxt.Count>3000  then                      //<1415f: Ehto siirtty ChkYli... PRC´hen.
         ChkYliRvtDebWrInfo('DebWr',LstTxt.Count);  //<+1415f: Oli DefsFileen´ssä, nyt sirtty tähän.
      sm := ''; {sc := ' ';{1414fu sc := '   ';}                  //,,Tämä osa tekee jokarivin sisennykseen yhden ' '.###############################
      for ai := 1 to marg  do sm := sm +sc;  //<Tehdään marginaali SM.
      LstTxt.Add(sm +so +' ' +SI);           //<Luettujen jälkeen lisätään LstTxt´hen uusi rv.
    //if (so='') and (SI='')                 //<Read/Writella vasta SijKut.. kun uusikin rv on lisätty.???
      if marg<0                              //1415d: Ed IF (so='') and (SI='') => marg<0   Etsi"DebWr(-"
         then SijKutsuLkmt;                  //'Näistä tunnistetaan: tekee "filen loppuun yhteenvedon DebWr-kutsujen SAMANlaisista riveistä."
      DebWrCnt := LstTxt.Count;              //<+1415b. ShowMessage tms ei onaa vielä, nyt ks. DebWrCnt (glob).
      LstTxt.SaveToFile(FN);
      LstTxt.Free;
   end;//if NOT.. else
end;//DebWr
(*begin//DebWr............................
   if {isDebuggerPresent  or }fDirectoryExists(DefsFileChkLueONdn_203)  then begin //1414e:  +DefsFileeseenFON. TÄMÄ ALP =LoadFromFile().
      FN := ExtractFilePath(Application.ExeName); //'+1414e.
      FN := FN +'\' +DefsFileChkLueONdn_203 +'\$_FileListKutsuLkm.txt'; //<+1414f:  +"..\..ONdn"
      Lst := TStringList.Create;
      if fFileExists(FN)
         then begin Lst.LoadFromFile(FN);
                    if Lst.Count-1>5000                                                     //<,+1414e.
                       then PaaValFrm.Caption := '>>>Poista: ..nola\$DefsFile..-204(203)<<<'
                       else PaaValFrm.Caption := 'Nola / Päävalinta';  end
         else Lst.Add('Tässä ovat PRC DebWr´n kutsujen (..LueTal_FileLista..) -aiheeseen liittyvien kutsujen kirjaukset.');
      sc := '   ';  sm := '';
      for u := 1 to u  do sm := sm +sc; //<Tehdään marginaali SM.
      Lst.Add(sm +so +' ' +SI);
      if (so='') and (SI='')
         then SijKutsuLkmt;
      Lst.SaveToFile(FN);
      Lst.Free;
end; end;//DebWr*)
//-------------------------------------------------------------------------------------------------------------------------------------------------------

function fTeePolkuFileN(AlpPolku,AstiTunniste_FileNimiOsa :string) :string;      VAR s,sa :string;  u :integer;  boo :boolean{120.6};      begin //+120.5
                       //FNC =AlpPolusta otetaan Drive -osa johon jatketaan AlkuPolkua kunnes sen perään liitettynä AstiTunniste_FileNimiOsa Pat+Filenimi löytyy.
   //AlpPolku := '\\VERKKOLEVY\Nola\__projE\Projektit XE2\NolaKehi\SRC\Globals\a1.txt';
   //AlpPolku := 'C:\NolaRek';
   s := ExtractFileDrive(AlpPolku); //'RESULT=  Divr..Astitunniste + Filenimiosa, esim:  \\VERKKOLEVY\Nola\__projE\Projektit XE2\NolaKehi\NolaRek\NolaRek.NOR
   u := Length(s);
   if (u=2) and (AlpPolku[u+1]='\') and (AstiTunniste_FileNimiOsa[1]='\') //<,Muuten tulee C:\\  todettu :120.6 .
      then Delete(AstiTunniste_FileNimiOsa,1,1);
   sa := '';                                              //              ,,,,,,,,,,,,=Drive.
   repeat u := u+1;                                       //< NolaRekPFN= \\Reijo-xp\e\NolaRek\NoleRek.NOR   nyt: \\VERKKOLEVY\Nola\__projE\NolaRek
          s := s +AlpPolku[u];                            //Lisätään mrk kerrallaan nimeen kunnes REKFILE_NAME löytyy (tai sitten ei).
          sa := s +AstiTunniste_FileNimiOsa;              //C:\NolaRek\NolaRek.NOR
          boo := fFileExists(sa);
   until boo  or (u=Length(AlpPolku));                    //\\VERKKOLEVY\Nola\__projE\NolaRek\NolaRek.NOR   <= Nyt polku NolaRek.NOR´riin.#####################
   s := sa;
   if fFileExists(s)
   then result := s                                       //<_Release_NolaRek.exe  tai NolaRek.exe -ajo mistä vain =Tarvitaan NolaRek.NOR -fileä.
   else begin
      result := InputBox ('"' +AstiTunniste_FileNimiOsa +'" ei löydy polusta.' , 'Anna/muokkaa:',s);
      Halt;
   end;
end;//fTeePolkuFileN
//''========================================================================================================================================================

procedure EtsiExenJuuri_TeeAjoDir;   VAR Drv,Polku{,Pnor,Ptxb,FN},s,{sa,}sx,sDRVerr :string;  {boo :boolean 1414d} {u,y,val :integer;}      begin //12.0.05
                                             //Etsii JuuriHakemiston ja sijoittaa gAjoExeN,gAjoPath,gAjoConfPath globMuuttujat. 12.0.02:
                                             //'POLKU = \\Reijo-xp\e\Projektit XE2\NolaKehi\BIN\Config
                                             //'      = \\Reijo-xp\e\Projektit XE2\NolaKehi\Toimitus\Nola => ..\Toimitus\Config
                                             //'Jos NolaRek.EXE ajetaan NolaRek -dirristä, BIN -dirriä ei ole ja.. ks Globals.PAS.
                                             //,gAjoExeN=Win64_Release_Nola.exe kun NolaRek´n aikana käynnistetty.
   gAjoExeN := ExtractFileName (Application.ExeName);                 //<Pelkkä EXEnimi.  ExtractFileDrive,Dir,Path. '..Release_Nola.exe
   Polku := IncludeTrailingPathDelimiter (ExtractFilePath (Application.ExeName)); //IncludeKeno turha, "\" tulee loppuun muutenkin.
   s := ExtractFileDrive(Polku);             //<,,+1415f.
 //if NOT DRVokJaFon(Polku)  then begin
   if NOT DRVok(Polku)  then begin
      sDRVerr := 'Ajo käynnistetty sopimattomasta asemasta [' +s +'], asema saattaa poistua ajon aikana.'+Chr(10) +'Ajo KESKEYTETÄÄN.';
      RegFnVirhe := sDRVerr;                 //<Ajon lopettamiseen Nola.DPR´ään.
      MessageDlg(sDRVerr, mtError,[mbOK],0); //<mtError sis. Beep.
{     Application.Terminate;                 //<,,Ei näköjään onaa ajon lopetus, tulee tänne useita kertoja vielä jälkeenpäin.
      Application.Terminate;
      Exit;                                  //<?? Ei näköjään tarvita ed. lisäksi. Tarttee sittenkin, 1x ainakin jatkaa uudelle kierrokselle.
      Halt;
      Application.MainForm.Close;}
   end;
 //'#########################################################################################################################################################
 //'#########################################################################################################################################################
 //,#########################################################################################################################################################
 //,#########################################################################################################################################################
   gAjoPath := Polku;
   s := Polku +DefsFileChkLueONdn_203{4}; //<\\VERKKOLEVY\Nola\__projE\Projektit XE2 1206\NolaKehi\BIN\_$DefsFileeseenON-204
   DefsFileeseenONb := fDirectoryExists(s);        //<130.2d +1201. => 1414e. Tämä korvaa fDefsFileeseenNyt, ...ONdn oli jo aikaisemminkin.

 {æedEioo_FLstFN :=  Polku +'$_$Err0-FileList~.tmp';      //<+1413: FNC LueTal_FileLista´ssa tehdyt herjat +infot, koska ShowMess.. ei ole käytettävissä.
   edEiOK_FLstFN := Polku +'$_$Err1-FileList~.tmp'; æ}
   LstOutErrFn :=    Polku +'$_$Err-LstOut~.tmp';
 //LstOutErrFn := Polku +'$_$FileList~.tmp'        //<+1413: FNC LueTal_FileLista´ssa tehdyt herjat +infot, koska ShowMess.. ei ole käytettävissä.
//¿DefsFileen('Defs/EtsiEx: 00 ------------------------------------------');             //<Siirto tähän 1201: DefsFileen.. polkutiedot oltava ennen tätä kutsua.
//¿DefsFileen(LFR +'Defs/EtsiEx: 01 Application.ExeName=' +Application.ExeName);         //<Tyhjä rv eteen ´120.5f.
Yfileen('¿0 '+DateTimeToStr(Now));  //<+1415d.
Yfileen('¿0 Defs/EtsiExF');
   Drv := ExtractFileDrive(Polku);                  //<Drv=\\Reijo-xp\e   Polku=\\Reijo-xp\e\Projektit XE2\NolaKehi\bin\ //,#################################
                                                    // tai: =X tms.            =X:\Projektit XE2\NolaKehi\bin\  ###ks. alempna TextBase.NOL alla.############
                                                    //,Asiakkailla AINA:  \\VERKKOL...\Nola\Config        ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,+120.6
   gAjoConfPath := gAjoPath +'Config\';             //<DEVELOPER1 KEHIssä:   \\VERKKOLEVY\Nola\__projE\Projektit XE2\NolaKehi\BIN\Config  TAI ...\Nola\Config
                                   //<Asiakkailla AINA:  \\VERKKOL...\Nola\Config        ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,+120.6
                                   //<'+120.6 & 5f OLEELLINEN muutos: NolaRek.EXE´n dirrissä eioo Config´ia =puretaan taaksepäin +\BIN\Conf.
                                                    //<|_ \\VERKKOLEVY\Nola\__projE\Projektit XE2\NolaKehi\NolaRek
                                                    // | ,,DEVELOPER1 esim. NolaRek´illä (siellä ei \Config´ | giä).
                                                    //<| AIVAN sama testi kuin fRePunKehi   .             |
                                                    //<| Vain DEVELOPER1 koneessa pätee EIKÄ NOLAKEHI näy muil | le.
                                                    //<|_ \\VERKKOLEVY\Nola\__projE\Projektit XE2\NolaKehi\BIN\Config
                                                    //    '''''''''''''''''=Drive.
   //boo := fRePunKehi{1414d};
     sx := '';//'X'; //<+130.2d: Jotta tunnistuisi ajossa täällä käydyksi. //,,Oletukseksi gAjoConfPath vaikkei olekaan OK. Juoneksi gAjoPath.
   //while NOT DirectoryExists(gAjoConfPath)  do begin              //  C:\Aa\1302\Nola\Config
{OLI:while NOT fFileExists(gAjoConfPath +'\TextBase.NOL')  do begin //  C:\Aa\1302\Nola\Config .  TÄMÄ LUOTETTAVAMPI (ja TextBase´hän on välttämättä oltava.
        fChkKaikille_Query('[1.1: Defs/TeeAjoDir]: Config -POLKUA ei löydy (Exe="' +gAjoPath +'")',
                                  'Anna Config´in polku: ' +gAjoPath +'...',gAjoConfPath);          }
     if NOT fFileExists(gAjoConfPath +'TextBase.NOL')  then begin  //  C:\Aa\1302\Nola\Config .  TÄMÄ LUOTETTAVAMPI (ja TextBase´hän on välttämättä oltava.
        InputBox('Välttämätön tiedosto puuttuu, ks. lisähuomautus tämän jälkeen...','Ota Ctrl+C´llä polku tästä talteen:', gAjoConfPath +'TextBase.NOL');
        ShowMessage('TextBase.NOL on asennuspaketissa' +Chr(10) +
                    'Ajo keskeytetään.');
        Halt;
     end else
     while NOT fFileExists(gAjoConfPath +'\TextBase.NOL')  do begin //  C:\Aa\1302\Nola\Config .  TÄMÄ LUOTETTAVAMPI (ja TextBase´hän on välttämättä oltava.
         fChkKaikille_Query('[1.1: Defs/TeeAjoDir]: Config -POLKUA ei löydy (Exe="' +gAjoPath +'")',
                                  'Anna Config´in polku: ' +gAjoPath +'...',gAjoConfPath);    //'''''''''''''''''''''''''''''''''''''''''+120.6, while+120.5f
         if fDirectoryExists(gAjoConfPath)                                                    //<-130.2c: Exs_ vex.
            then sx := ' =Polku OK.!!!!!!!!!!!!!!!!!!!!!!' +sx
            else sx := ' =Polku VÄÄRIN.!!!!!!!!!!!!!!!!!!' +sx;
         s := fPCnNimi;              //+1415d
         ShowMessage ('1.2: Defs/.._TeeAjoDir'                +LFR +
                      'Kone: "'  +s +'"'                      +LFR +LFR +
                      'EXE=           "' +Application.ExeName +LFR +
                      'Exen path= "'     +Polku +'"'          +LFR +
                      'AjoDir=        "' +gAjoPath            +LFR +
                      'Config=       "'  +gAjoConfPath +'"' + sx);
      end;//while   //'C:\Projektit XE2\NolaKehi\BIN\Config\                              //,Lisäsin käsin aluksi +1000.  }
                                   if IsDebuggerPresent or fRePunKehi  //or fRePunPC(s) //<1314: +IsDebuggerPresent: EI ynnännyt yhtäkään 1413 -deb.ajoa.
                                      then KirjoitaTestiKerta; //<12.0.0:  Siirrtty LueTal/ Lue´sta.  120.45: Siirrtty Def.PAS´iin.
                                   if fDirectoryExists(gAjoConfPath)
                                      then s := 'Löytyy: '
                                      else s := 'EI OLE: ';
                                   s := s +gAjoConfPath;
                                   ShowMsg ('1 Defs/' +s +'  gAjoPath: ' +gAjoPath); //<120.4x
//NolaRekPFN := siirrtty tästä Globals´iin jossa kysely INPUT.. jos tarvis. Siellä myös CopyFile(TextBase..
                                   //¿DefsFileen('Defs/EtsiEx: 091: gAjoConfPath=' +gAjoConfPath +CR +'Defs/EtsiEx: 092: gAjoExeN=' +gAjoExeN +CR +
                                   //¿           'Defs/EtsiEx: 093: gAjoPath=' +gAjoPath +' ®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®®'); //'+120.6
//ShowMessage('2/2 Defs/EtsiExenJuuri_TeeAjoDir´ssa');
//if (gAjoExeN='') and (gAjoPath='') and (gAjoConfPath='')  then beep(200,200); //Jottei optimointi jättäisi koko tätä fnc (EtsiExenJuuri_TeeAjoDir) väliin =+120.5f .
end;//EtsiExenJuuri_TeeAjoDir
end.

