{
* Copyright (c) 2020, Reijo Pursiainen, Hannu Pursiainen
* All rights reserved.
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*
*     * Redistributions of source code must retain the above copyright
*       notice, this list of conditions and the following disclaimer.
*     * Redistributions in binary form must reproduce the above copyright
*       notice, this list of conditions and the following disclaimer in the
*       documentation and/or other materials provided with the distribution.
*     * Neither the name of Reijo Pursiainen, Hannu Pursiainen nor the
*       names of its contributors may be used to endorse or promote products
*       derived from this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY REIJO PURSIAINEN, HANNU PURSIAINEN AND
* CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
* BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
* A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL REIJO PURSIAINEN,
* HANNU PURSIAINEN AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
* LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
}

///////////////////////////////////////////////////////////////////////////////
//
// FileName:  Log.pas
// Location:  src\Globals
// Abstract:  Logging service
//
///////////////////////////////////////////////////////////////////////////////
//
// Following fields are automatically generated by the version control system:
//
// $Revision: 1.4 $
//     $Date: 2005/10/09 14:01:50 $
//
///////////////////////////////////////////////////////////////////////////////
//
// Change Log. Old log entries can be removed by deleting them.
// $Log: Log.pas,v $
// Revision 1.4  2005/10/09 14:01:50  DEVELOPER2
// Reijolta 26.9.2005
//
//
// 1     26.10.03 21:31 DEVELOPER2
//

unit Log;

interface

uses
  Sysutils, {+12.0.07 DefsFileenZ:}Defs, Dialogs{+120.5i};

type
  MessageType = (
    lmgError,    // Message is an error. ERROR test is written to the file
    lmgWarning,  // Message is an event. EVENT text is written to the file
    lmgInfo      // Message is an info.  INFO  text is written tó the file
  );

  TLog = Class
  private
    { Private declarations }

    // Name of the program that is added to the log entry
    programName: string;

    // Name of the file to which the messages are written.
    fileName: string;

    // Name of the backup file
    fileNameBackup: string;

    // Maximum size of the file
    fileMaxSize: integer;

    // Tries to open the file
    function OpenFile(var fileHandle: TextFile): boolean;

    // Check that the file does not get bigger than maximum size.
    // Returns false if the file size is exceeded.
    // If the size of the log file is bigger than maximum size
    // the function tries to delete old backup file and rename
    // the log file to backup file.
    function CheckFileSize(): boolean;

  public
    { Public declarations }
    constructor Create;
    destructor Destroy; override;

    // Tries to open the file
    //
    // When the size of the file fileName exceeds the fileMaxSize the
    // file fileName is renamed to backupFileName. If the file backupFileName
    // already exists it will be deleted.
    //
    // fileName:       name of the log file (must contain full path)
    // fileNameBackup: name of the backup log file (must contain full path)
    // fileMaxSize:    maximum size of the log file
    // programName:    name of the program that is written to the log file.
    function Open(fileName: string; fileNameBackup: string; fileMaxSize: integer; programName: string): boolean;

    // Tries to close the file. Automatically called when the object is destroyed
    // No messages are written to the file after this is called.
    procedure Close();

    // Writes a log message to the file
    //
    // Open must be called before messages are written to the file
    //
    // Example:
    //   myLicense.WriteMessage(lmgError, 'main.pas', 'Exception raised')
    //   causes following line to be written to the log file
    //   "2003-10-26 18:53:15 ERROR    main.pas Nola.exe  Exception raised"
    //
    // MessageType:  type of the message. See above.
    // location:     string that identifies the location where the message is created (can be empty)
    // MessageText:  string that is written to the file
    function WriteMessage(MessageType: MessageType; location: string; MessageText: string): boolean;

  end;

implementation

uses
  Winapi.Windows;

constructor TLog.Create;
begin
  inherited Create;
end;

destructor TLog.Destroy;
begin
  inherited Destroy;
end;

{procedure DllMessage (si :string); export; //http://delphi.about.com/od/windowsshellapi/a/dll_basics.htm
begin                                      //Tällä saa Messagen tehtyä, normaali ShowMess ei eorki vielä.=+124.43  Myös Log.PAS´ssa.
  ShowMessage(si); //Ei onaa täällä !?!?!?!?
end;}

function TLog.Open(fileName: string; fileNameBackup: string; fileMaxSize: integer; programName: string): boolean;
var
  fileHandle: TextFile;
begin
  {if (gAjoPath='') or (gAjoConfPath='')  then         //<,+120.6/5u: NolaNet ei käynyt Defs/... Nyt siirtty tähän (paljon)alempaa TextBaseFileN´n TAKAA.
      //EtsiExenJuuri_TeeAjoDir;            //<'120.5g: Nämä siirretty myRegSettings.SetStringValue´n JÄLJESTÄ, OLI PAHA VIRHE, Registryyn meni VÄÄRÄ tieto.
        ShowMessage('EiKäyty EtsiExenJuuri_TeeAjoDir´ssä')  else
        ShowMessage('EtsiExenJuuri_TeeAjoDir´ssä on käyty, OK.');
}
   //¿DefsFileenZ('Log.PAS 1 /Open');
  result := false;
  self.programName := programName;
  self.fileName := fileName;
  self.fileNameBackup := fileNameBackup;
  self.fileMaxSize := fileMaxSize;

  // Test if the file can be opened for writing
  if OpenFile(fileHandle) then
  begin
    CloseFile(fileHandle);
    result := true;
  end;
//¿DefsFileenZ('Log.PAS 2 /Open');
end;

procedure TLog.Close();
begin
  self.programName := '';
  self.fileName := '';
  self.fileNameBackup := '';
  self.fileMaxSize := 0;
end;

function TLog.WriteMessage(MessageType: MessageType; location: string; MessageText: string): boolean;
var
  fileHandle: TextFile;
  messageToFile: string;
  typeText: string;
begin
   //¿DefsFileenZ('Log.PAS 3 /WriteMessage');
  result := false;

  // Check the size of the file
  if CheckFileSize() then
  begin
    // Open the file
    if OpenFile(fileHandle) then
    begin
      // Prepare the message type
      case messageType of
      lmgError:   typeText := 'VIRHE   ';
      lmgWarning: typeText := 'VAROITUS';
      lmgInfo:    typeText := 'INFO    ';
      else
                  typeText := '        ';
      end;

      // Prepare the log entry that is written to the file
      //DefsFile3('Log.PAS/WriteMessage/ 1/2: Format ([%s %s ..*n, .. Format(%s %s %s)= ' +Format ('%s %s %s');
    //DllMessage('Tuleeko Log.PAS/WriteMessage/ 1/2:  error := Format..');  //ShowMessage ei onaa vielä, DllMess.. ks. CreateGlob. ja tässä (Log.Pas) alussa.
      DefsFile3('Log.PAS/WriteMessage/ 1/2: Format ([%s %s ..*n, .. ' +
                       Format('%s %s %s %s %s %s',
       [FormatDateTime('yyyy-mm-dd', date), FormatDateTime('hh:nn:ss', time),
        typeText, programName, location, MessageText]));
      messageToFile := Format('%s %s %s %s %s %s',
       [FormatDateTime('yyyy-mm-dd', date), FormatDateTime('hh:nn:ss', time),
        typeText, programName, location, MessageText]);
      DefsFile3('Log.PAS/WriteMessage/ 2/2: Format ([%s %s ..*n, .. ' +
                       Format('%s %s %s %s %s %s',
       [FormatDateTime('yyyy-mm-dd', date), FormatDateTime('hh:nn:ss', time),
        typeText, programName, location, MessageText]));
      //Windows.Beep (2000,100);                         <Ei onaa vielä.
      // Write message to the file
      WriteLn(fileHandle, messageToFile);
      CloseFile(fileHandle);

      result := true;
    end
  end;
   //¿DefsFileenZ('Log.PAS 4 /WriteMessage');
end;

function TLog.OpenFile(var fileHandle: TextFile): boolean;
begin
  result := false;
   //¿DefsFileenZ('Log.PAS 5/8 /OpenFile (fn=' +fileName +')');
  if (fileName <> '') then         //'´´´+120.5i
  begin
   //¿DefsFileenZ('Log.PAS 6/8 /OpenFile');
    try
      // Try to open the file
      if (fFileExists(fileName)) then
      begin
        // File already exists so try to append to the file
        AssignFile(fileHandle, fileName);
        Append(fileHandle);
        result := true;
   //¿DefsFileenZ('Log.PAS 61/8 /OpenFile'); //<+120.5i
      end
      else
      begin
        // File does not exists so try to create a directory
   //¿DefsFileenZ('Log.PAS 71(72)8 Force1/2 /OpenFile FileName: ' +fileName); //<+120.5i
        if (ForceDirectories(ExtractFileDir(fileName))) then     //<Kommntt 120.5i: tulee tähän vain, jos fileName eioo eikä dir´riä, todettu.
        begin
          // Try to open a new file
   //¿DefsFileenZ('Log.PAS 72/8 Force2/2 /OpenFile FileName: ' +fileName);
          AssignFile(fileHandle, fileName);
          Rewrite(fileHandle);
          result := true;
        end;
      end;
    except
    else
      // Operation failed
   //¿DefsFileenZ('Log.PAS 73/8 /OpenFile FileName EiOK: ' +fileName); //<+120.5i
      result := false;
    end;
  end;
   //¿DefsFileenZ('Log.PAS 8/8 /OpenFile');
end;

function TLog.CheckFileSize(): boolean;
var
  fileHandle: file of Byte;
  size: integer;
begin
   //¿DefsFileenZ('Log.PAS 9 /OpenFile');
  result := true;

  if (fileName <> '') then
  begin
    try
      // Try to open the file
      if (fFileExists(fileName)) then
      begin
        // Check the size of the file
                               //¿DefsFileenZ('Log.PAS AssignFile 2');
        AssignFile(fileHandle, fileName);
        Reset(fileHandle);
        size := FileSize(fileHandle);
        CloseFile(fileHandle);

        if (size > fileMaxSize) then
        begin
            // Move the current file to back
            If (fFileExists(FileNameBackup)) then
              Sysutils.DeleteFile(FileNameBackup); // Try to delete old backup file
            if Sysutils.RenameFile(fileName, FileNameBackup) then
              result := true // Current log file could be renamed to backup file
            else
            begin
              // Current log file could not be renamed to backup file so
              // try to delete the current log file so that file does not grow.
              if Sysutils.DeleteFile(fileName) then
                result := true;
            end;
        end;
      end;
    except
    else
      result := false;
    end;
  end;
   //¿DefsFileenZ('Log.PAS 99 /OpenFile');
end;

end.
